<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>(增强篇)  Bezier曲线拟合数据点的几何作图法</title>
    <url>/post/56c1b7a3.html</url>
    <content><![CDATA[<blockquote>
<p>在之前的一篇 <a
href="https://www.ifish.ink/post/7741e06a.html">“Bezier曲线拟合数据点的几何作图法”</a>
博客基础上添加鼠标移动控制顶点交互的功能。</p>
</blockquote>
<h3
id="交互选择控制顶点并画出初始曲线">交互选择控制顶点，并画出初始曲线</h3>
<pre class="language-matlab" data-language="matlab"><code class="language-matlab">clear
close all
grid on<span class="token punctuation">,</span>hold on
<span class="token comment">% axis equal</span>
global ctrl_points h1 h_bezier<span class="token punctuation">;</span>
<span class="token punctuation">[</span>ctrl_points<span class="token punctuation">,</span>h<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">cqj_selectPoints</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token number">i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token operator">:</span><span class="token number">0.01</span><span class="token operator">:</span><span class="token number">1</span>
    <span class="token function">newData</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span><span class="token function">int32</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">cqj_GetBezier3Point</span><span class="token punctuation">(</span>ctrl_points<span class="token punctuation">,</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">end</span>
h_bezier <span class="token operator">=</span> <span class="token function">plot</span><span class="token punctuation">(</span><span class="token function">newData</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">:</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">newData</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">:</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'-r'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

h1 <span class="token operator">=</span> <span class="token function">plot</span><span class="token punctuation">(</span><span class="token function">ctrl_points</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">ctrl_points</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'r*'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">set</span><span class="token punctuation">(</span>h1<span class="token punctuation">,</span><span class="token string">'visible'</span><span class="token punctuation">,</span><span class="token string">'off'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
text__ <span class="token operator">=</span> <span class="token function">cell</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token function">size</span><span class="token punctuation">(</span>ctrl_points<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token number">i</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">:</span><span class="token function">size</span><span class="token punctuation">(</span>ctrl_points<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>
    text__<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">i</span><span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">num2str</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">end</span>

myText <span class="token operator">=</span> <span class="token function">text</span><span class="token punctuation">(</span><span class="token function">ctrl_points</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">:</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">ctrl_points</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">:</span><span class="token punctuation">)</span><span class="token punctuation">,</span>text__<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">set</span><span class="token punctuation">(</span>gcf<span class="token punctuation">,</span><span class="token string">'WindowButtonDownFcn'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token operator">@</span>ButtonDownFcn<span class="token punctuation">,</span>h<span class="token punctuation">,</span>myText<span class="token punctuation">,</span>h_bezier<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">set</span><span class="token punctuation">(</span>gcf<span class="token punctuation">,</span><span class="token string">'WindowButtonUpFcn'</span><span class="token punctuation">,</span><span class="token operator">@</span>ButtonUpFcn<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<span id="more"></span>
<h3 id="bezier曲线几何作图法">Bezier曲线几何作图法</h3>
<pre class="language-matlab" data-language="matlab"><code class="language-matlab"><span class="token keyword">function</span> <span class="token punctuation">[</span> data <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">cqj_GetBezier3Point</span><span class="token punctuation">(</span>dataPoints<span class="token punctuation">,</span>u<span class="token punctuation">)</span>
<span class="token comment">% 得到曲线参数为u的数据点</span>
<span class="token comment">% dataPoints：初始点 2xn</span>
data <span class="token operator">=</span> dataPoints<span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token number">1</span>
    <span class="token keyword">if</span> <span class="token function">size</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">end</span>
    temp <span class="token operator">=</span> <span class="token function">zeros</span><span class="token punctuation">(</span><span class="token function">size</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">size</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token number">i</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">:</span><span class="token function">size</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span>
        <span class="token function">temp</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span><span class="token number">i</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>u<span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token operator">+</span>u<span class="token operator">*</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span><span class="token number">i</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">end</span>
    data <span class="token operator">=</span> temp<span class="token punctuation">;</span>
<span class="token keyword">end</span>
<span class="token keyword">end</span></code></pre>
<h3 id="处理鼠标响应事件">处理鼠标响应事件</h3>
<pre class="language-matlab" data-language="matlab"><code class="language-matlab"><span class="token keyword">function</span> <span class="token function">ButtonUpFcn</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token punctuation">,</span><span class="token operator">~</span><span class="token punctuation">)</span>
<span class="token function">set</span><span class="token punctuation">(</span>gcf<span class="token punctuation">,</span> <span class="token string">'WindowButtonMotionFcn'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">%取消鼠标移动响应</span>
<span class="token keyword">end</span></code></pre>
<pre class="language-matlab" data-language="matlab"><code class="language-matlab"><span class="token keyword">function</span> <span class="token function">ButtonMotionFcn</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token punctuation">,</span><span class="token operator">~</span><span class="token punctuation">,</span>ind<span class="token punctuation">,</span>h<span class="token punctuation">,</span>myText<span class="token punctuation">,</span>h_bezier<span class="token punctuation">)</span>
global ctrl_points h1<span class="token punctuation">;</span>
pt <span class="token operator">=</span> <span class="token function">get</span><span class="token punctuation">(</span>gca<span class="token punctuation">,</span><span class="token string">'CurrentPoint'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">%获取当前点坐标</span>
<span class="token function">ctrl_points</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span>ind<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token function">pt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">pt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">for</span> <span class="token number">i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token operator">:</span><span class="token number">0.01</span><span class="token operator">:</span><span class="token number">1</span>
    <span class="token function">newData</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span><span class="token function">int32</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">cqj_GetBezier3Point</span><span class="token punctuation">(</span>ctrl_points<span class="token punctuation">,</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">end</span>
<span class="token function">set</span><span class="token punctuation">(</span>h_bezier<span class="token punctuation">,</span><span class="token string">'XData'</span><span class="token punctuation">,</span><span class="token function">newData</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">:</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">set</span><span class="token punctuation">(</span>h_bezier<span class="token punctuation">,</span><span class="token string">'YData'</span><span class="token punctuation">,</span><span class="token function">newData</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">:</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">set</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span><span class="token string">'xdata'</span><span class="token punctuation">,</span><span class="token function">ctrl_points</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">:</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">set</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span><span class="token string">'ydata'</span><span class="token punctuation">,</span><span class="token function">ctrl_points</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">:</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">set</span><span class="token punctuation">(</span><span class="token function">myText</span><span class="token punctuation">(</span>ind<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'position'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token function">pt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">pt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">set</span><span class="token punctuation">(</span>h1<span class="token punctuation">,</span><span class="token string">'xdata'</span><span class="token punctuation">,</span><span class="token function">pt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">set</span><span class="token punctuation">(</span>h1<span class="token punctuation">,</span><span class="token string">'ydata'</span><span class="token punctuation">,</span><span class="token function">pt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">set</span><span class="token punctuation">(</span>h1<span class="token punctuation">,</span><span class="token string">'visible'</span><span class="token punctuation">,</span><span class="token string">'on'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
drawnow<span class="token punctuation">;</span>
<span class="token keyword">end</span></code></pre>
<pre class="language-matlab" data-language="matlab"><code class="language-matlab"><span class="token keyword">function</span> <span class="token function">ButtonDownFcn</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token punctuation">,</span><span class="token operator">~</span><span class="token punctuation">,</span>h<span class="token punctuation">,</span>myText<span class="token punctuation">,</span>h_bezier<span class="token punctuation">)</span>
global ctrl_points h1<span class="token punctuation">;</span>
pt <span class="token operator">=</span> <span class="token function">get</span><span class="token punctuation">(</span>gca<span class="token punctuation">,</span><span class="token string">'CurrentPoint'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">%获取当前点坐标</span>
curpoint <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token function">pt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">pt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">% 当前点坐标</span>
curpoint_tr <span class="token operator">=</span> curpoint<span class="token operator">*</span><span class="token function">ones</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token function">size</span><span class="token punctuation">(</span>ctrl_points<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">%当前点坐标矩阵 每列一样</span>
distance <span class="token operator">=</span> <span class="token function">vecnorm</span><span class="token punctuation">(</span>curpoint_tr<span class="token operator">-</span>ctrl_points<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">%当前点坐标与每个控制点的距离构成的向量</span>
<span class="token keyword">if</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token function">distance</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">0.1</span>  <span class="token comment">% 如果距离控制点比较近</span>
    <span class="token punctuation">[</span><span class="token operator">~</span><span class="token punctuation">,</span>ind<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>distance<span class="token operator">==</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token function">distance</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">% 当前点最近的那个点</span>
    <span class="token function">set</span><span class="token punctuation">(</span>h1<span class="token punctuation">,</span><span class="token string">'xdata'</span><span class="token punctuation">,</span><span class="token function">ctrl_points</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>ind<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">set</span><span class="token punctuation">(</span>h1<span class="token punctuation">,</span><span class="token string">'ydata'</span><span class="token punctuation">,</span><span class="token function">ctrl_points</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>ind<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">set</span><span class="token punctuation">(</span>h1<span class="token punctuation">,</span><span class="token string">'visible'</span><span class="token punctuation">,</span><span class="token string">'on'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">set</span><span class="token punctuation">(</span>gcf<span class="token punctuation">,</span><span class="token string">'WindowButtonMotionFcn'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token operator">@</span>ButtonMotionFcn<span class="token punctuation">,</span>ind<span class="token punctuation">,</span>h<span class="token punctuation">,</span>myText<span class="token punctuation">,</span>h_bezier<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">%设置鼠标移动响应</span>
<span class="token keyword">end</span>
<span class="token keyword">end</span></code></pre>
<h3 id="封装了一个选择点的方法">封装了一个选择点的方法</h3>
<pre class="language-matlab" data-language="matlab"><code class="language-matlab"><span class="token keyword">function</span> <span class="token punctuation">[</span>dataPoints<span class="token punctuation">,</span>h<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">cqj_selectPoints</span><span class="token punctuation">(</span>isclose<span class="token punctuation">,</span>x_axis<span class="token punctuation">,</span>y_axis<span class="token punctuation">)</span>

<span class="token keyword">if</span> <span class="token operator">~</span><span class="token function">exist</span><span class="token punctuation">(</span><span class="token string">'isclose'</span><span class="token punctuation">,</span><span class="token string">'var'</span><span class="token punctuation">)</span>
    isclose <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">end</span>

<span class="token keyword">if</span> <span class="token operator">~</span><span class="token function">exist</span><span class="token punctuation">(</span><span class="token string">'x_axis'</span><span class="token punctuation">,</span><span class="token string">'var'</span><span class="token punctuation">)</span>
    x_axis <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">end</span>
<span class="token keyword">if</span> <span class="token operator">~</span><span class="token function">exist</span><span class="token punctuation">(</span><span class="token string">'y_axis'</span><span class="token punctuation">,</span><span class="token string">'var'</span><span class="token punctuation">)</span>
    y_axis <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">end</span>
<span class="token function">axis</span><span class="token punctuation">(</span><span class="token punctuation">[</span>x_axis<span class="token punctuation">,</span>y_axis<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
grid on<span class="token punctuation">,</span>hold on
<span class="token function">questdlg</span><span class="token punctuation">(</span><span class="token string">'1.鼠标左键：选择新点   2.鼠标中键或右键：选择最后一个点'</span><span class="token punctuation">,</span><span class="token string">'操作'</span><span class="token punctuation">,</span><span class="token string">'ok'</span><span class="token punctuation">,</span><span class="token string">'ok'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">%% 从鼠标获取数据点</span>
<span class="token number">i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token number">1</span>
    <span class="token number">i</span> <span class="token operator">=</span> <span class="token number">i</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
    tip <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'请选择第'</span><span class="token punctuation">,</span><span class="token function">num2str</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'个数据点'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">xlabel</span><span class="token punctuation">(</span>tip<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span>
        <span class="token punctuation">[</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>button<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">ginput</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">catch</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token keyword">end</span>
    <span class="token function">dataPoints</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span><span class="token number">i</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">[</span>x<span class="token punctuation">;</span>y<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token number">i</span><span class="token operator">==</span><span class="token number">1</span>
        h <span class="token operator">=</span> <span class="token function">plot</span><span class="token punctuation">(</span><span class="token function">dataPoints</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">:</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">dataPoints</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">:</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'b-o'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span>
        <span class="token function">set</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span><span class="token string">'XData'</span><span class="token punctuation">,</span><span class="token function">dataPoints</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">:</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">set</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span><span class="token string">'YData'</span><span class="token punctuation">,</span><span class="token function">dataPoints</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">:</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">end</span>
    <span class="token keyword">if</span> button <span class="token operator">~=</span> <span class="token number">1</span>
        <span class="token function">xlabel</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">end</span>
<span class="token keyword">end</span>
<span class="token keyword">if</span> isclose
    <span class="token function">set</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span><span class="token string">'XData'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token function">dataPoints</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">end</span><span class="token punctuation">)</span> <span class="token function">dataPoints</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">set</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span><span class="token string">'YData'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token function">dataPoints</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token keyword">end</span><span class="token punctuation">)</span> <span class="token function">dataPoints</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">end</span>
<span class="token keyword">end</span></code></pre>
<h3 id="结果">结果</h3>
<p><img src="http://img.ifish.ink/2020/1103_1.gif" /></p>
]]></content>
      <categories>
        <category>曲线曲面</category>
      </categories>
      <tags>
        <tag>MATLAB代码</tag>
        <tag>算法实现</tag>
        <tag>拟合</tag>
      </tags>
  </entry>
  <entry>
    <title>Github上 fork了别人的代码 本地更新主分支代码</title>
    <url>/post/8f4cbc0c.html</url>
    <content><![CDATA[<h3 id="github上-fork了别人的代码-本地更新主分支代码">Github上
fork了别人的代码 本地更新主分支代码</h3>
<ul>
<li><p>查看本地仓库项目目录：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> remote <span class="token parameter variable">-v</span></code></pre></li>
<li><p>添加上游项目地址：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> remote <span class="token function">add</span> <span class="token operator">&lt;</span>remote-name<span class="token operator">></span> <span class="token operator">&lt;</span>your upstream URL<span class="token operator">></span></code></pre>
<span id="more"></span>
<p>例如我从https://github.com/xxx/xxxx.git这个项目地址fork，则指令为：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> remote <span class="token function">add</span> test1 https://github.com/xxx/xxxx.git</code></pre></li>
</ul>
<hr />
<p>上面是第一次配置即可，下面则每次从上游更新时执行</p>
<ul>
<li><p>从上游提取：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> fetch <span class="token operator">&lt;</span>remote-name<span class="token operator">></span></code></pre></li>
<li><p>合并：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> merge <span class="token operator">&lt;</span>remote-name<span class="token operator">></span>/<span class="token operator">&lt;</span>branches-name<span class="token operator">></span></code></pre></li>
<li><p>上传：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> push</code></pre></li>
</ul>
]]></content>
      <categories>
        <category>工具技能</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>Bezier曲线拟合数据点的几何作图法</title>
    <url>/post/7741e06a.html</url>
    <content><![CDATA[<blockquote>
<p>Bezier曲线拟合数据点的几何作图法MATLAB程序。</p>
</blockquote>
<h1 id="contents">Contents</h1>
<h3 id="左键选择点右键或中间结束">左键选择点，右键或中间结束</h3>
<pre class="language-MATLAB" data-language="MATLAB"><code class="language-MATLAB">clear
close all
figure;
axis([-5,5,-5,5]);
grid on;
title(&#39;Bezier曲线拟合&#39;);
questdlg(&#39;1.鼠标左键：选择新点   2.鼠标中键或右键：选择最后一个点&#39;,&#39;操作&#39;,&#39;ok&#39;,&#39;ok&#39;);</code></pre>
<span id="more"></span>
<p><img src="http://img.ifish.ink/figure/main_01.png" /></p>
<h3 id="从鼠标获取数据点">从鼠标获取数据点</h3>
<pre class="language-MATLAB" data-language="MATLAB"><code class="language-MATLAB">i &#x3D; 0;
while 1
    i &#x3D; i+1;
    tip &#x3D; [&#39;请选择第&#39;,num2str(i),&#39;个数据点&#39;];
    xlabel(tip);
    try
    [x,y,button] &#x3D; ginput(1);
    catch
        return;
    end
    hold on ,plot(x,y,&#39;o&#39;);
    dataPoints(:,i) &#x3D; [x;y];
    h1 &#x3D; plot(dataPoints(1,:),dataPoints(2,:),&#39;b&#39;);
    if button ~&#x3D; 1
        xlabel(&#39;&#39;);
        break;
    end
end


for i &#x3D; 0:0.01:1
    newData(:,int32(i*100)+1) &#x3D; cqj_GetBezier3Point(dataPoints,i);
end
h2 &#x3D; plot(newData(1,:),newData(2,:),&#39;.-r&#39;);
legend([h1,h2],&#39;原始点&#39;,&#39;3次Bezier曲线&#39;)</code></pre>
<p><img src="http://img.ifish.ink/figure/main_02.png" /></p>
<h3 id="得到曲线参数为u的数据点">得到曲线参数为u的数据点</h3>
<pre class="language-MATLAB" data-language="MATLAB"><code class="language-MATLAB">function [ data ] &#x3D; cqj_GetBezier3Point(dataPoints,u)
% 得到曲线参数为u的数据点
% dataPoints：初始点 2xn
data &#x3D; dataPoints;
while 1
    if size(data,2) &#x3D;&#x3D; 1
        break;
    end
    temp &#x3D; zeros(size(data,1),size(data,2)-1);
    for i &#x3D; 1:size(data,2)-1
        temp(:,i) &#x3D; (1-u)*data(:,i)+u*data(:,i+1);
    end
    data &#x3D; temp;
end
end</code></pre>
<p><img src="http://img.ifish.ink/figure/main_03.png" /></p>
<hr />
<p><strong>如有任何疑问或建议欢迎下方留言 :-)</strong></p>
]]></content>
      <categories>
        <category>曲线曲面</category>
      </categories>
      <tags>
        <tag>MATLAB代码</tag>
        <tag>拟合</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenSubdiv + Visual Studio环境配置</title>
    <url>/post/a507e481.html</url>
    <content><![CDATA[<blockquote>
<p>本文主要讲述了OpenSubdiv开源库+Visual Studio的环境搭建</p>
</blockquote>
<blockquote>
<p>（本文是根据自己实际操作所述，由于本人知识水平有限，文中难免会出现错误之处，欢迎指正，邮箱
<strong>qingjun_chang@163.com</strong>。转载请注明出处：https://ifish.ink
） （先前条件：<strong>win7系统</strong> 已安装<strong><a
href="https://www.visualstudio.com/zh-hans/downloads/?rr=https%3A%2F%2Fwww.baidu.com%2Flink%3Furl%3DONpFewA8iJADJ6k-0Vh-e0ksVaeZ1GHtaq69v0CmD1rmI69oYDQkXG0TB-OTaHhjT6-_LmULT-knoIdE9yhmmq%26wd%3D%26eqid%3Dd2d58bc800015f450000000659ddca4f">Visual
Studio</a></strong>环境，相关文件在附件） <span id="more"></span> * * *</p>
</blockquote>
<h2 id="下载所需要的资源">1.下载所需要的资源</h2>
<p>需要的资源文件有<a
href="http://graphics.pixar.com/opensubdiv/docs/intro.html">OpenSubdiv</a>开源库的源代码、<a
href="https://cmake.org/download/">cmake</a>（跨平台的安装、编译工具）、OpenGL的两款扩展库glew和glfw。
​ <strong>OpenSubdiv的源代码</strong>：如已安装git工具，点击<a
href="https://github.com/PixarAnimationStudios/OpenSubdiv.git">这里</a>可直接从GitHub上获取；如果没有git工具可以直接用我附件提供的源代码OpenSubdiv-master.zip，然后解压。我的路径为：d:/../OpenSubdiv-master/该目录内容如下图所示（git方式获取的可能有细微差异）
<img src="http://img.ifish.ink/figure/1.png" alt="fig1" /> ​
 <strong>cmake的安装</strong>：可直接从<a
href="https://cmake.org/download/">cmake官网</a>下载二进制文件，64位系统如下图所示。.msi文件下载完成后，按照下述方法安装即可。
<img src="http://img.ifish.ink/figure/2.png" alt="fig2" /></p>
<ul>
<li><p>双击安装，会弹出如下界面，点击“Next”按钮，进入下一步</p></li>
<li><p>同意CMake的条款，点击“Next”按钮，进入到下一步</p></li>
<li><p>添加环境变量，选中“<em>Add CMake to the system PATH for the all
user</em>”,点击“<em>Next</em>”按钮。（也可以选择添加到当前用户“<em>Add
CMake to the system PATH for the current user</em>”）</p></li>
<li><p>选择安装目录，安装即可。 <strong>glew</strong>：GLEW ：<a
href="http://glew.sourceforge.net">http://glew.sourceforge.net</a>
如图所示可以下载二进制文件，或者用git克隆也可。</p></li>
</ul>
<p><img src="http://img.ifish.ink/figure/2.png" alt="fig3" /> <img
src="http://img.ifish.ink/figure/4.png" alt="fig4" /> ​
<strong>glfw</strong>：GLfW ：<a
href="http://www.glfw.org/">http://www.glfw.org/</a>
如图所示可以下载压缩文件，或者用git克隆也可。 <img
src="http://img.ifish.ink/figure/5.png" alt="fig5" /> <img
src="http://img.ifish.ink/figure/6.png" alt="fig6" /></p>
<hr />
<h2 id="cmake编译glfw">2.Cmake编译glfw</h2>
<h4 id="a.打开cmake-gui选择源代码目录和构建路径">a.打开Cmake
GUI选择源代码目录和构建路径：</h4>
<p><img src="http://img.ifish.ink/figure/7.png" alt="fig7" /> <img
src="http://img.ifish.ink/figure/8.png" alt="fig8" /></p>
<h4
id="b.单击configure选择是并根据自己vs版本选择">b.单击Configure，选择“是”，并根据自己VS版本选择</h4>
<p><img src="http://img.ifish.ink/figure/9.png" alt="fig9" /> <img
src="http://img.ifish.ink/figure/10.png" alt="fig10" /></p>
<h4
id="c.单击finish出现红色后再次点击configure出现configuring-done即可">c.单击Finish，出现红色后再次点击Configure，出现‘Configuring
done’即可</h4>
<p><img src="http://img.ifish.ink/figure/11.png" alt="fig11" /> <img
src="http://img.ifish.ink/figure/12.png" alt="fig12" /></p>
<h4
id="d.单击generate出现generating-done完成">d.单击Generate，出现Generating
done完成</h4>
<figure>
<img src="http://img.ifish.ink/figure/13.png" alt="fig13" />
<figcaption aria-hidden="true">fig13</figcaption>
</figure>
<hr />
<h2 id="cmake编译opensubdiv">3.Cmake编译OpenSubdiv</h2>
<p>Win+R打开CMD窗口，进入到OpenSubdiv-master目录下拷贝下面黄色部分全部命令后回车：（路径根据自己情况做相应改变，VS2015则为VS14,VS2010为VS10，其余的自己可以查一下版本根据需要变更</p>
<pre class="language-none"><code class="language-none">&quot;d:&#x2F;Cmake3.8.0&#x2F;bin&#x2F;cmake.exe&quot; -G &quot;Visual Studio 14 Win64&quot; -DGLEW_LOCATION&#x3D;[d:&#x2F;glew&#x2F;lib&#x2F;Release&#x2F;x64] -DGLEW_INCLUDE_DIR&#x3D;[d:\glew\include\] -DGLEW_LIBRARY&#x3D;[d:\glew\lib\] -DGLFW_LOCATION&#x3D;[d:&#x2F;glfw&#x2F;bd&#x2F;src&#x2F;Release] -DNO_PTEX&#x3D;1 -DNO_DOC&#x3D;1 -DNO_OMP&#x3D;1 -DNO_TBB&#x3D;1 -DNO_CUDA&#x3D;1 -DNO_OPENCL&#x3D;1 -DNO_CLEW&#x3D;1</code></pre>
<p>NO_PTEX=1表示为安装PTEX纹理库，如需要可仿照GLEW和GLFW的操作方法进行修改命令。
<img src="http://img.ifish.ink/figure/14.png" alt="fig14" />
按下回车键： <img src="http://img.ifish.ink/figure/15.png"
alt="fig15" /> 完成！！！</p>
<hr />
<h2 id="vs下编译opensubdiv">4.VS下编译OpenSubdiv</h2>
<p>完成上述操作后，你会看见你的../OpenSubdiv-master/目录下会有一个OpenSubdiv.sln的解决方案，用Visual
Studio打开此文件 <img src="http://img.ifish.ink/figure/16.png"
alt="fig16" />
点击菜单栏“生成”→“批生成”，将所有的ALL_BUILD选中，点击“生成” <img
src="http://img.ifish.ink/figure/17.png" alt="fig17" />
生成过程需要一点时间，请耐心等待…… <img
src="http://img.ifish.ink/figure/18.png" alt="fig18" /> 生成成功 <img
src="http://img.ifish.ink/figure/19.png" alt="fig19" />
测试：选中一个例子右击选择“设为启动项目”，然后<strong>Ctrl+F5</strong>运行
<img src="http://img.ifish.ink/figure/20.png" alt="fig20" />
运行后如图所示： <img src="http://img.ifish.ink/figure/21.png"
alt="fig21" /> 其余例子也可同理运行。 谢谢阅读！！！</p>
<hr />
<p><strong>如有任何疑问或建议欢迎下方留言 :-)</strong></p>
]]></content>
      <categories>
        <category>工具技能</category>
      </categories>
      <tags>
        <tag>环境配置</tag>
      </tags>
  </entry>
  <entry>
    <title>WordPress站点地图自动更新</title>
    <url>/post/943451b1.html</url>
    <content><![CDATA[<blockquote>
<p>站点地图可以各个搜索引擎能够爬取到我们网站上页面。</p>
</blockquote>
<p>之前的方式是向google或者百度等搜索引擎的站长工具提交sitemap.xml或者其他静态文本文件
<img src="http://img.ifish.ink/img/baiduzhanzhang.png" alt="百度站长" />
<span id="more"></span> <img src="http://img.ifish.ink/img/googlezhanzhang.png"
alt="google" />
现在的<strong>google-sitemap-generator</strong>插件采用非静态方式，如下图所示采用url传参的方式获取站点地图的.xml文件
<img src="http://img.ifish.ink/img/2.png" alt="google" />
在百度站点或者谷歌站点配置时，只需要将此url设置好就可以了</p>
<hr />
<p><strong>如有任何疑问或建议欢迎下方留言 :-)</strong></p>
]]></content>
      <categories>
        <category>工具技能</category>
      </categories>
      <tags>
        <tag>SEO</tag>
        <tag>sitemap</tag>
        <tag>wordpress</tag>
      </tags>
  </entry>
  <entry>
    <title>WordPress插件更新出现Briefly unavailable for scheduled maintenance. Check back in a minute</title>
    <url>/post/563c2d.html</url>
    <content><![CDATA[<blockquote>
<p>在用WordPress仪表盘自动更新插件或WordPress版本时，有时会出现
<strong>Briefly unavailable for scheduled maintenance. Check back in a
minute.</strong> ，导致我们的WordPress站点不能正常使用</p>
</blockquote>
<figure>
<img src="http://img.ifish.ink/img/20190703103139.png"
title="Briefly unavailable for scheduled maintenance. Check back in a minute."
alt="Briefly unavailable for scheduled maintenance. Check back in a minute." />
<figcaption aria-hidden="true">Briefly unavailable for scheduled
maintenance. Check back in a minute.</figcaption>
</figure>
<h3 id="原因">原因：</h3>
<p>这是由于我们在更新插件的时候，由于网络不畅或者其他原因造成自动更新终端，所以访问时会出现“Briefly
unavailable for scheduled maintenance. Check back in a minute.”</p>
<span id="more"></span>
<h3 id="解决方法">解决方法：</h3>
<p>在更新插件时，WordPress会自动产生一个 <strong>.maintenance</strong>
的文本文件，所以只需要将这个文本文件 <em>删除</em> 或者 <em>置空</em>
即可</p>
<ul>
<li>用FTP或者从终端进入WordPress的根目录下，删除
<strong>.maintenance</strong> 文件</li>
<li>但是有时候我们会发现进入根目录后找不到 <strong>.maintenance</strong>
文件，所以我们可以在本地新建一个空的文本文件，将文件名更改为
<em>.maintenance</em>，然后上传到WordPress的根目录即可，这时你就会在你的WordPress看到
<strong>.maintenance</strong> 文件，然后删除即可。</li>
</ul>
<p>重新访问网站，发现一切正常:smile: 感谢阅读！</p>
<hr />
<p><strong>如有任何疑问或建议欢迎下方留言 :-)</strong></p>
]]></content>
      <categories>
        <category>工具技能</category>
      </categories>
      <tags>
        <tag>wordpress</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu 外接显示与内置显示切换</title>
    <url>/post/83277084.html</url>
    <content><![CDATA[<ul>
<li>查看显示器设备名称
在Linux终端键入命令：<code>$ xrandx</code>，如下图所示查看对应的设备名称，本例为
LVDS-1 和 HDMI-1
(如果你的外接显示器使用VGA转接一般就是VGA-1，如果使用HDMI转接一般是HDMI-1)</li>
</ul>
<span id="more"></span>
<p><img src="http://img.ifish.ink/img/display_1.png" /></p>
<ul>
<li><p>关闭外接显示器
终端键入：<code>$ xrandr --output HDMI-1 --off</code>
(其中名称VGA-1根据你自己的设备名称作相应的替换)</p></li>
<li><p>打开外接显示器，关闭内置显示器
终端键入：<code>$ xrandr --output HDMI-1 --auto --output LVDS-1 --off</code>
(其中名称HDMI-1和LVDS-1根据你自己的设备名称作相应的替换)</p></li>
<li><p>关闭外接显示器，打开内置显示器
终端键入：<code>$ xrandr --output HDMI-1 --off --output LVDS-1 --auto</code>
(其中名称HDMI-1和LVDS-1根据你自己的设备名称作相应的替换)</p></li>
</ul>
<hr />
<p><strong>如有任何疑问或建议欢迎下方留言 :-)</strong></p>
]]></content>
      <categories>
        <category>工具技能</category>
      </categories>
      <tags>
        <tag>环境配置</tag>
        <tag>ubuntu</tag>
        <tag>方法</tag>
      </tags>
  </entry>
  <entry>
    <title>git clone 速度慢？</title>
    <url>/post/ec4bf4f5.html</url>
    <content><![CDATA[<p><code>$ git clone https://xxxx</code> 克隆速度慢的解决方法：</p>
<h2 id="方法1">方法1：</h2>
<h3 id="查询ip地址">查询IP地址</h3>
<p>进入域名IP地址查看工具： <a href="https://www.ipaddress.com"
title="https://www.ipaddress.com">https://www.ipaddress.com</a>
分别输入如下网址查看对应的IP地址</p>
<span id="more"></span>
<p><code>github.global.ssl.fastly.net</code> <code>github.com</code>
或者分别通过命令<code>$ nslookup github.global.ssl.fastly.Net</code>和<code>$ nslookup github.com</code>也可获得对应的IP地址</p>
<h3 id="修改hosts文件">修改hosts文件</h3>
<p>得到对应的IP后，在hosts文件后追加如下两行
Windows用户hosts文件所在路径为：<code>C:\Windows\System32\drivers\etc\hosts</code>
Linux用户：<code>sudo gedit /etc/hosts</code>
（xxx替换为你得到的对应的IP地址）</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">xxx.xxx.xxx.xxx github.global-ssl.fastly.net
xxx.xxx.xxx.xxx github.com</code></pre>
<h3 id="刷新dns">刷新DNS</h3>
<p>Windows用户：<code>ipconfig /flushdns</code>
Linux用户：<code>sudo /etc/init.d/networking restart</code></p>
<h2 id="方法2">方法2：</h2>
<p>如果你使用了代理，可直接在克隆前使用如下命令</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config <span class="token parameter variable">--global</span> http.proxy <span class="token string">'sock5://127.0.0.1:1080'</span>
<span class="token function">git</span> config <span class="token parameter variable">--global</span> https.proxy <span class="token string">'sock5://127.0.0.1:1080'</span></code></pre>
<hr />
<p><strong>如有任何疑问或建议欢迎下方留言 :-)</strong></p>
]]></content>
      <categories>
        <category>工具技能</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>github</tag>
        <tag>环境配置</tag>
      </tags>
  </entry>
  <entry>
    <title>三对角矩阵的类雅可比迭代程序</title>
    <url>/post/f9428d51.html</url>
    <content><![CDATA[<h2
id="三对角矩阵的类雅可比迭代算法解线性方程组">三对角矩阵的类雅可比迭代算法解线性方程组</h2>
<span id="more"></span>
<ul>
<li>函数实现</li>
</ul>
<pre class="language-MATLAB" data-language="MATLAB"><code class="language-MATLAB">function [ output_args ] &#x3D; cqj_QuasiJacobi(init_X,coefficient_mat,b_mat,maxNum,epsilon)
% 类雅可比迭代法 只不过对角矩阵D由三对角矩阵代替
% init_X：初始值
% coefficient_mat：系数矩阵
% b_mat：b
% maxNum：最大迭代次数
% epsilon：精度
output_args &#x3D; [];
flag &#x3D; 0;

%% 预处理 检查用户调用函数时参数格式是否传错
if size(coefficient_mat,1) ~&#x3D; size(coefficient_mat,2)
    disp(&#39;系数矩阵格式错误(需要方阵)&#39;);
    return;
end
if size(b_mat,1) ~&#x3D; 1 &amp;&amp; size(b_mat,2) ~&#x3D; 1
    disp(&#39;AX&#x3D;b中的b必须为行向量或者列向量&#39;);
    return;
end
if size(b_mat,1) &#x3D;&#x3D; 1
    b_mat &#x3D; b_mat&#39;;
end
if size(init_X,1) ~&#x3D; 1 &amp;&amp; size(init_X,2) ~&#x3D; 1
    disp(&#39;初始值必须为行向量或者列向量&#39;);
    return;
end
if size(init_X,1) &#x3D;&#x3D; 1
    init_X &#x3D; init_X&#39;;
end
if size(init_X,1) ~&#x3D; size(coefficient_mat,1)
    disp(&#39;初始值与系数矩阵维数不一致&#39;);
    return;
end
if size(init_X,1) ~&#x3D; size(b_mat,1)
    disp(&#39;AX&#x3D;b中的b向量维数错误(需与系数矩阵的维数一致&#39;);
    return;
end
if ~exist(&#39;maxNum&#39;, &#39;var&#39;)
    maxNum &#x3D; 500; % 默认值
end
if ~exist(&#39;epsilon&#39;, &#39;var&#39;)
    epsilon &#x3D; 1e-14; % 默认值
end

%% 三对角线
a &#x3D; diag(coefficient_mat,-1)&#39;;
b &#x3D; diag(coefficient_mat)&#39;;
c &#x3D; diag(coefficient_mat,1)&#39;;
D &#x3D; diag(a,-1)+diag(b)+diag(c,1);

% 采用冉瑞生等人《三对角矩阵求逆的算法》中的算法
[~,D_inv] &#x3D; cqj_InverseMatrixOfTridiagonalMatrices(a,b,c);
if isempty(D_inv)
    disp(&#39;系数矩阵不可逆&#39;);
    return;
end
%% 开始迭代
% 下面代码段也行 但是对内存的消耗比较大 
% x(:,0) &#x3D; init_X;
% for k &#x3D; 1:maxNum
%     x(:,k) &#x3D; D_inv*(b_mat-(coefficient_mat-D)*x(:,k-1));
%     if norm(x(:,k)-x(:,k-1)) &lt; epsilon  % 达到精度
%         flag &#x3D; 1;
%         break;
%     end
% end
x &#x3D; init_X;
%%
% 迭代公式：
% $$x_&#123;k+1&#125;&#x3D;D^&#123;-1&#125;(b-(L+U)x_k),k&#x3D;0,1,2,\cdots$
% 
for k &#x3D; 1:maxNum
    temp &#x3D; D_inv*(b_mat-(coefficient_mat-D)*x);
    if norm(temp-x) &lt; epsilon
        flag &#x3D; 1;
        x &#x3D; temp;
        break;
    end
    x &#x3D; temp;
end


%% 结果
text(0,0.95,&#39;方程：&#39;,&#39;Color&#39;,&#39;red&#39;,&#39;FontSize&#39;,14);
str1 &#x3D; &#39;\left[\begin&#123;array&#125;&#39;;
% 正则表达式
str2 &#x3D; @(X) regexprep(regexprep(mat2str(zeros(1,size(X,2))),...
    &#39;[\s\[\]]&#39;,&#39;&#39;),&#39;0&#39;,&#39;c&#39;); 
mat_start &#x3D; @(X) [str1 &#39;&#123;&#39; str2(X) &#39;&#125;&#39;];
my_mat2str &#x3D; @(mat) regexprep(regexprep(regexprep(mat2str(mat),...
    &#39; *&#39;,&#39;&amp;&#39;),&#39;;&#39;,&#39;\\\&#39;),&#39;[\[\]]&#39;,&#39;&#39;);
mat_end &#x3D; &#39;\end&#123;array&#125;\right]&#39;;
str5 &#x3D; &#39;\times X&#x3D;&#39;;
% LaTex 输出
text(&#39;Interpreter&#39;,&#39;latex&#39;, &#39;String&#39;,[&#39;$$&#39;...
    mat_start(coefficient_mat),my_mat2str(coefficient_mat),mat_end,...
    str5,mat_start(b_mat),my_mat2str(b_mat),mat_end &#39;$$&#39;],...
    &#39;Position&#39;,[0.1 0.7],&#39;FontSize&#39;,10);
text(0,0.5,&#39;三对角类雅可比迭代的结果：&#39;,&#39;Color&#39;,&#39;red&#39;,&#39;FontSize&#39;,14);
if flag &#x3D;&#x3D; 1  %好的结果
    output_args.itrNum &#x3D; k;
    output_args.result &#x3D; x;
    fprintf(&#39;迭代次数：%d\n&#39;,output_args.itrNum);
%     disp(x(:,k));
    disp(&#39;解：&#39;);
    disp(x);
    text(&#39;Interpreter&#39;,&#39;latex&#39;, &#39;String&#39;,[&#39;$$X^*&#x3D;&#39; ...
        mat_start(x) my_mat2str(x) mat_end &#39;$$&#39;],...
        &#39;Position&#39;,[0.1 0.3],&#39;FontSize&#39;,10);
    text(0.1,0.1,[&#39;迭代次数：&#39; num2str(output_args.itrNum)],...
    &#39;Color&#39;,&#39;k&#39;,&#39;FontSize&#39;,10);
    return;
end
text(0.1,0.3,[&#39;迭代&#39; num2str(maxNum) &#39;次后未收敛&#39;],...
    &#39;Color&#39;,&#39;k&#39;,&#39;FontSize&#39;,10);
fprintf(&#39;迭代%d次后暂未收敛\n&#39;,maxNum);
end</code></pre>
<ul>
<li>测试程序</li>
</ul>
<pre class="language-MATLAB" data-language="MATLAB"><code class="language-MATLAB">xishu_mat &#x3D; [20 8 -5 -5;7 9 -2 -10;-5 -1 9 -1;-7 1 -9 10];
b_mat &#x3D; [-1 -5 2 -1];
init_X &#x3D; zeros(size(b_mat));
out_QuasiJacobi &#x3D; cqj_QuasiJacobi(init_X,xishu_mat,b_mat,1000);</code></pre>
<ul>
<li>文档 <a
href="https://img.ifish.ink/Jacobianlike_Iterators_Tri_Matrices.pdf">三对角矩阵的类雅可比迭代程序.pdf</a></li>
</ul>
<hr />
<p><strong>如有任何疑问或建议欢迎下方留言 :-)</strong></p>
]]></content>
      <categories>
        <category>代数</category>
      </categories>
      <tags>
        <tag>MATLAB代码</tag>
        <tag>算法实现</tag>
      </tags>
  </entry>
  <entry>
    <title>三次样条插值</title>
    <url>/post/cubicspline.html</url>
    <content><![CDATA[<h3 id="三次样条函数">三次样条函数</h3>
<p>对于给定<span
class="math inline">\(\mathbb{R}^2\)</span>域内一组有序点<span
class="math inline">\(\{\mathbf{Q}_i\}_{i=0}^n\)</span>，对应参数为<span
class="math inline">\(\{t_i\}_{i=0}^n\)</span>，找到一组分段三次多项式函数插值每个数据点。</p>
<h4 id="考虑插值点处c2连续-平滑顶点">考虑插值点处<span
class="math inline">\(C^2\)</span>连续 （平滑顶点）</h4>
<p>对于<span
class="math inline">\(n+1\)</span>个数据点，相邻两点之间用三次多项式表达，则有<span
class="math inline">\(n\)</span>段三次多项式，用待定系数的方式设第<span
class="math inline">\(i(i=0,1,\dots,n)\)</span>段向量型多项式函数为
<span
class="math display">\[\mathbf{P}_i(t)=a_{i,0}+a_{i,1}t+a_{i,2}t^2+a_{i,3}t^3\]</span>
从上式可以看出总共<span class="math inline">\(4n\)</span>个未知数，<span
class="math inline">\(C^2\)</span>连续需要满足约束条件：</p>
<ul>
<li><p>每段多项式在端点处插值 <span
class="math display">\[\mathbf{P}_i(t_i)=\mathbf{Q}_i\qquad
\mathbf{P}_i(t_{i+1})=\mathbf{Q}_{i+1}\qquad i =
0,1,\dots,n\]</span></p></li>
<li><p>中间点一阶导连续 <span
class="math display">\[\mathbf{P}&#39;_{i-1}(t_i-0)=\mathbf{P}&#39;_i(t_i+0)\qquad
i=1,2,\dots,n-1\]</span></p></li>
<li><p>中间点二阶导连续 <span
class="math display">\[\mathbf{P}&#39;&#39;_{i-1}(t_i-0)=\mathbf{P}&#39;&#39;_i(t_i+0)\qquad
i=1,2,\dots,n-1\]</span></p></li>
</ul>
<p>这里总共<span
class="math inline">\(4n-2\)</span>个方程，还需要两个约束条件，这里我们选择首尾两点二阶导等于0，即自然边界条件：
<span
class="math display">\[\mathbf{P}&#39;&#39;_0(t_0)=\mathbf{P}&#39;&#39;_{n-1}(t_n)=0\qquad
i=1,2,\dots,n-1\]</span> 这里我们引入中间变量弯矩，参考<a
href="http://staff.ustc.edu.cn/~lgliu/Courses/GAMES102_2020/documents/GAMES102-suppl-2-CubicSpline.pdf">此文</a>，可得每段多项式的表达式：
<span
class="math display">\[\mathbf{P}_i(t)=\frac{M_i}{6h_i}(t_{i+1}-t)^3+\frac{M_{i+1}}{6h_i}(t-t_i)^3+\left(\frac{Q_{i+1}}{h_i}-\frac{M_{i+1}h_i}{6}\right)(t-t_i)+\left(\frac{\mathbf{Q}_i}{h_i}-\frac{M_ih_i}{6}\right)(t_{i+1}-t)\]</span>
其中<span class="math inline">\(h_i=t_{i+1}-t_i\)</span>，<span
class="math inline">\(M\)</span>是如下三对角线性系统的解，<span
class="math inline">\(M_0=M_n=0\)</span> <span
class="math display">\[\begin{equation}
\left(
    \begin{array}{ccccc}
    u_1 &amp; h_1 &amp;    &amp; &amp;\\
    h_1 &amp; u_2 &amp; h_2 &amp; &amp;\\
    &amp;\ddots&amp;\ddots&amp;\ddots&amp;\\
    &amp;&amp;h_{n-3}&amp;u_{n-2}&amp;h_{n-2}\\
    &amp;&amp;&amp;h_{n-2}&amp;u_{n-1}
    \end{array}
    \right)\left(
        \begin{array}{c}
        M_1\\M_2\\\vdots\\M_{n-1}
        \end{array}
        \right)=\left(
        \begin{array}{c}
        v_1\\v_2\\\vdots\\v_{n-1}
        \end{array}   
            \right)
\end{equation}\]</span> 其中<span
class="math inline">\(u_i=2(h_i+h_{i-1})\)</span>，<span
class="math inline">\(v_i=\frac{6}{h_i}(\mathbf{Q}_{i+1}-\mathbf{Q}_i)-\frac{6}{h_{i-1}}(\mathbf{Q}_i-\mathbf{Q}_{i-1})\)</span>
<img src="/images/imgs/1223_1.png"
alt="平滑顶点绘制（全局C^2连续）" /></p>
<h4 id="考虑插值点处c0连续角部顶点">考虑插值点处<span
class="math inline">\(C^0\)</span>连续（角部顶点）</h4>
<p>对于每一段给定插值点处的左导数<span
class="math inline">\(f&#39;_-\)</span>和右导数<span
class="math inline">\(f&#39;_+\)</span>，加上插值该段的两点，4个未知数4个方程可以求解出该段的三次多项式函数：</p>
<p>例如在<span class="math inline">\([t_i,t_{i+1}]\)</span>区间： <span
class="math display">\[\begin{equation}
\left\{
    \begin{array}{ccccccccc}
    a_{i,0} &amp; + &amp; a_{i,1}t_i &amp; + &amp; a_{i,2}t_i^2 &amp; +
&amp; a_{i,2}t_i^3 &amp; = &amp; \mathbf{Q}_i\\
    a_{i,0} &amp; + &amp; a_{i,1}t_{i+1} &amp; + &amp; a_{i,2}t_{i+1}^2
&amp; + &amp; a_{i,2}t_{i+1}^3 &amp; = &amp; \mathbf{Q}_{i+1}\\
    &amp;&amp;a_{i,1}&amp;+&amp;2a_{i,2}t_i&amp;+&amp;3a_{i,3}t_i^2&amp;=&amp;\mathbf{P}&#39;_i(t_i+0)\\
    &amp;&amp;a_{i,1}&amp;+&amp;2a_{i,2}t_{i+1}&amp;+&amp;3a_{i,3}t_{i+1}^2&amp;=&amp;\mathbf{P}&#39;_{i+1}(t_i-0)
    \end{array}
    \right.
\end{equation}\]</span> 求解该式可得到每段的三次多项式。 <img
src="/images/imgs/1223_2.png"
alt="角部顶点绘制（型值点处为C^0连续，其他点C^2连续）" /></p>
<h4 id="考虑插值点处g1连续直线点">考虑插值点处<span
class="math inline">\(G^1\)</span>连续（直线点）</h4>
<p>在角部顶点基础上保证一点的左导数与右导数方向在同一直线即可。即上面方程中<span
class="math inline">\(\mathbf{P}&#39;_i(t_i+0)=\lambda\mathbf{P}&#39;_{i+1}(t_i-0)\)</span>
<img src="/images/imgs/1223_3.png"
alt="角部顶点绘制（型值点处为G^1连续，其他点C^2连续）" /></p>
<video width="90%" controls>
<source src="https://img.ifish.ink/vedio/HW-4.mp4" type="video/mp4">
</video>
<h3 id="主要代码">主要代码</h3>
<ul>
<li><p>高斯-塞德尔迭代求解三对角：</p>
<p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">GaussSeidel</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">></span> h<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">></span> u<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">></span> v<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">></span><span class="token operator">*</span> M<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">></span> _M0 <span class="token operator">=</span> <span class="token operator">*</span>M<span class="token punctuation">;</span> 
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>u<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
            <span class="token punctuation">(</span><span class="token operator">*</span>M<span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>h<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span>M<span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>h<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span>_M0<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span>u<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> 
        <span class="token comment">// 迭代停止条件</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>Eigen<span class="token double-colon punctuation">::</span><span class="token class-name">VectorXf</span><span class="token double-colon punctuation">::</span><span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>M<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token operator">*</span>M<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span>Eigen<span class="token double-colon punctuation">::</span><span class="token class-name">VectorXf</span><span class="token double-colon punctuation">::</span><span class="token function">Map</span><span class="token punctuation">(</span>_M0<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>_M0<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">norm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>EPSILON<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        _M0 <span class="token operator">=</span> <span class="token operator">*</span>M<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre></p></li>
<li><p>求解给定导数后的分段样条：</p>
<p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">if</span> <span class="token punctuation">(</span>validDerivative<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">float</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>
    <span class="token keyword">auto</span> A <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">=</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token operator">-></span> Eigen<span class="token double-colon punctuation">::</span>Matrix4f <span class="token punctuation">&#123;</span>
        Eigen<span class="token double-colon punctuation">::</span>Matrix4f a<span class="token punctuation">;</span>
        a <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">,</span> t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> t<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> t<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> t<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token number">1</span><span class="token punctuation">,</span> t<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> t<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span>t<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> t<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span>t<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span>t<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token operator">*</span> t<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> t<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token operator">*</span>t<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span>t<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> a<span class="token punctuation">;</span> 
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token keyword">auto</span> B <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">=</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> xy<span class="token punctuation">)</span> <span class="token operator">-></span> Eigen<span class="token double-colon punctuation">::</span>Vector4f <span class="token punctuation">&#123;</span> 
        Eigen<span class="token double-colon punctuation">::</span>Vector4f b<span class="token punctuation">;</span>
        b <span class="token operator">&lt;&lt;</span> points<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>xy<span class="token punctuation">]</span><span class="token punctuation">,</span>
        points<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>xy<span class="token punctuation">]</span><span class="token punctuation">,</span> 
        <span class="token punctuation">(</span><span class="token operator">*</span>derivative<span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">[</span>xy<span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">(</span><span class="token operator">*</span>derivative<span class="token punctuation">)</span><span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">[</span>xy<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> b<span class="token punctuation">;</span> 
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token comment">// 四维矩阵可用Eigen，不会影响交互延迟</span>
    Eigen<span class="token double-colon punctuation">::</span>Vector4f ax <span class="token operator">=</span> <span class="token function">A</span><span class="token punctuation">(</span>segment_index<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">colPivHouseholderQr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">solve</span><span class="token punctuation">(</span><span class="token function">B</span><span class="token punctuation">(</span>segment_index<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Eigen<span class="token double-colon punctuation">::</span>Vector4f ay <span class="token operator">=</span> <span class="token function">A</span><span class="token punctuation">(</span>segment_index<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">colPivHouseholderQr</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">solve</span><span class="token punctuation">(</span><span class="token function">B</span><span class="token punctuation">(</span>segment_index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    x <span class="token operator">=</span> ax<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span>ax<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span>t0<span class="token operator">+</span>ax<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">*</span>t0<span class="token operator">*</span>t0<span class="token operator">+</span>ax<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">*</span>t0<span class="token operator">*</span>t0<span class="token operator">*</span>t0<span class="token punctuation">;</span> 
    y <span class="token operator">=</span> ay<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span>ay<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span>t0<span class="token operator">+</span>ay<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">*</span>t0<span class="token operator">*</span>t0<span class="token operator">+</span>ay<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">*</span>t0<span class="token operator">*</span>t0<span class="token operator">*</span>t0<span class="token punctuation">;</span> 
    <span class="token keyword">return</span> <span class="token class-name">Ubpa</span><span class="token double-colon punctuation">::</span><span class="token function">pointf2</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></p></li>
</ul>
]]></content>
      <categories>
        <category>曲线曲面</category>
      </categories>
      <tags>
        <tag>拟合</tag>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>三角网格曲面参数化</title>
    <url>/post/bcf65292.html</url>
    <content><![CDATA[<blockquote>
<p>本文介绍文章 <em>Parametrization and smooth approximation of surface
triangulations</em> 中的保形参数化算法，并给出MATLAB程序
曲面参数化问题：对于给定的三角网格曲面<span
class="math inline">\(\mathbf{S}\)</span>，找到一个映射<span
class="math inline">\(\phi(u,v):
\mathbb{R}^2\longmapsto\mathbb{R}^3\)</span>，使得平面参数域中的点与曲面网格的点一一对应，求解参数<span
class="math inline">\((u,v)\)</span>，即<span
class="math inline">\(\phi^{-1}\)</span>的过程称为参数化。</p>
</blockquote>
<hr />
<h2 id="算法描述">算法描述</h2>
<p><img src="http://img.ifish.ink/20201031/1.png" /></p>
<span id="more"></span>
<ol type="1">
<li><p>对于三角网格曲面<span
class="math inline">\(\mathbf{S}\)</span>的每个内部点<span
class="math inline">\(x_i\)</span>，寻找1领域内的邻接点，将其记为<span
class="math inline">\(x_{j_1},x_{j_2},\dots,x_{j_m}\)</span>，定义<span
class="math inline">\(x_i\)</span>的子图的顶点集<span
class="math inline">\(X_i={x_i,x_{j_1},x_{j_2},\dots,x_{j_m}}\)</span>表示，如上图左侧所示。</p></li>
<li><p>将步骤1中的<span
class="math inline">\(X_i\)</span>通过某种方式投影到平面域<span
class="math inline">\(\mathbb{R}^2\)</span>中，得到平面域中的图<span
class="math inline">\(P_i={p,p_1,p_2,\dots,p_m}\)</span>。上图中间</p>
<blockquote>
<p>这里的投影方式有多种选择，文章提及到最小二乘面和平均法向面，但是当曲面中三角面片之间的夹角过大时，这两种方法不具有稳定性。于是介绍了一种W-W提出的测地极坐标映射的方法。</p>
</blockquote>
<p><span class="math display">\[ r_k=\Vert p_k-p\Vert =\Vert
x_{j_k}-x_i\Vert \]</span></p></li>
</ol>
<p><span class="math display">\[ \theta_k = ang(p_k,p,p_{k+1})=2\pi
\frac{ang(x_{j_k},x_i,x_{j_{k+1}})}{\sum_kang(x_{j_k},x_i,x_{k_{k+1}})}
\]</span> 这里<span
class="math inline">\(ang(a,b,c)\)</span>表示向量<span
class="math inline">\(\vec {ba}\)</span>与向量<span
class="math inline">\(\vec
{bc}\)</span>之间的角度。实际上上面第二个等式就是将空间角度等比例放缩到平面中，因为平面周角为<span
class="math inline">\(2\pi\)</span>，所以前面需要乘<span
class="math inline">\(2\pi\)</span>。定义<span
class="math inline">\(p=(0,0)\)</span>，<span
class="math inline">\(p_1=(\Vert x_{j_1}-x_i\Vert,0)\)</span>，这里<span
class="math inline">\(p\)</span>相当于极点，<span
class="math inline">\(pp_1\)</span>相当于极轴，根据极坐标<span
class="math inline">\((r_k,\theta_k)\)</span>则可计算出每个<span
class="math inline">\(p_k\)</span>。则得到平面域中的多边形<span
class="math inline">\({p,p_1,p_2,\dots,p_m}\)</span>及其内部一点<span
class="math inline">\(p\)</span></p>
<ol start="3" type="1">
<li><p>计算<span
class="math inline">\(p\)</span>关于该平面多边形的广义重心坐标。这里采用均值重心坐标[<a
href="https://www.mn.uio.no/math/english/people/aca/michaelf/papers/mean_value.pdf"
title="Mean value coordinates">1</a>] 均值重心坐标的计算方式如下：</p>
<blockquote>
<p>c++实现均值重心坐标可参考我的另一篇文章：<a
href="http://www.ifish.ink/d033f67a.html">均值重心坐标Mean Value
Coordinates In 2D代码实现</a></p>
</blockquote>
<p><img src="http://img.ifish.ink/20201031/2.jpg" /></p></li>
<li><p>在第3步可计算出投影到平面域中的每个内部点关于1-ring点的广义重心坐标。
记：<span
class="math inline">\(\lambda_i=[\dots,0,\dots,\lambda_{j_a},\dots,\lambda_{j_b},\dots,0,\dots]\)</span>，即只是<span
class="math inline">\(x_i\)</span>的邻接点对应序号中的元素为第三步计算出的重心坐标值，其余位置为0</p></li>
<li><p>固定边界点对应的参数（如参数化到矩形域，则将网格曲面上边界点参数有序定义为矩形域的边界）
假定后<span class="math inline">\(N\)</span>个点为边界点，初始化<span
class="math inline">\({(u_i,v_i)}_{i=n+1}^N\)</span></p></li>
<li><p>记<span
class="math inline">\(\Lambda=[\lambda_1,\lambda_2,\dots,\lambda_n]^{\rm
T}\)</span>，求稀疏解线性方程组： <img
src="http://img.ifish.ink/20201031/5.png" /></p></li>
</ol>
<h2 id="matlab代码">MATLAB代码</h2>
<blockquote>
<p>下面代码仅适用于开网格 建议在桌面端浏览器或大屏移动端查看代码</p>
</blockquote>
<ul>
<li><p>首先导入模型文件：</p>
<pre class="language-matlab" data-language="matlab"><code class="language-matlab">clear<span class="token punctuation">,</span> close all
model_name <span class="token operator">=</span> <span class="token string">'data/bunny.obj'</span><span class="token punctuation">;</span>
<span class="token punctuation">[</span>v<span class="token punctuation">,</span>f<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">read_mesh</span><span class="token punctuation">(</span>model_name<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">% 导入模型</span></code></pre></li>
<li><p>计算边界点</p>
<pre class="language-matlab" data-language="matlab"><code class="language-matlab">boundary<span class="token operator">=</span><span class="token function">compute_boundary</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">% 计算边界点，注意此时的边界是有序的</span>
<span class="token function">assert</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token function">isempty</span><span class="token punctuation">(</span>boundary<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'仅适用于亏格数为0的开网格！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
MVC <span class="token operator">=</span> <span class="token function">sparse</span><span class="token punctuation">(</span><span class="token function">length</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">length</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li>
<li><p>对非边界点循环 计算均值重心坐标</p>
<pre class="language-matlab" data-language="matlab"><code class="language-matlab"><span class="token keyword">for</span> <span class="token number">i</span> <span class="token operator">=</span> <span class="token function">setdiff</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">:</span><span class="token function">length</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">,</span>boundary<span class="token punctuation">)</span>   <span class="token comment">% 对非边界点循环 i</span>
  <span class="token punctuation">[</span><span class="token operator">~</span><span class="token punctuation">,</span>indexes_of_adjacent_faces<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>f<span class="token operator">==</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">% 找到x_i的邻接面</span>
  adjacent_vertices <span class="token operator">=</span> <span class="token function">setdiff</span><span class="token punctuation">(</span><span class="token function">unique</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span>indexes_of_adjacent_faces<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">% x_i的邻接点</span>

  <span class="token comment">%% 对空间中的x_i的无序邻接点排序</span>
  djacent_vertices_ordered <span class="token operator">=</span> <span class="token function">zeros</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token function">length</span><span class="token punctuation">(</span>adjacent_vertices<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">djacent_vertices_ordered</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">adjacent_vertices</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">% 指定一个初始的</span>
  adjacent_faces <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span>indexes_of_adjacent_faces<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">% 取出邻接面</span>
  <span class="token keyword">for</span> ii <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">:</span><span class="token function">length</span><span class="token punctuation">(</span>adjacent_vertices<span class="token punctuation">)</span>
      <span class="token punctuation">[</span><span class="token operator">~</span><span class="token punctuation">,</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>adjacent_faces <span class="token operator">==</span> <span class="token function">djacent_vertices_ordered</span><span class="token punctuation">(</span>ii<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        
      p <span class="token operator">=</span> <span class="token function">setdiff</span><span class="token punctuation">(</span><span class="token function">unique</span><span class="token punctuation">(</span><span class="token function">adjacent_faces</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">[</span>djacent_vertices_ordered <span class="token number">i</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">djacent_vertices_ordered</span><span class="token punctuation">(</span>ii<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">p</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">end</span>

  <span class="token comment">%% 投影到平面</span>
  adjacent_edges <span class="token operator">=</span> <span class="token function">v</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span>djacent_vertices_ordered<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">repmat</span><span class="token punctuation">(</span><span class="token function">v</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token function">length</span><span class="token punctuation">(</span>adjacent_vertices<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">% X_J-X_i</span>
  adjacent_edges_1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token function">adjacent_edges</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token operator">:</span><span class="token keyword">end</span><span class="token punctuation">)</span> <span class="token function">adjacent_edges</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">% X_&#123;J+1&#125;-X_I</span>
  length_of_adjacent_edges <span class="token operator">=</span> <span class="token function">vecnorm</span><span class="token punctuation">(</span>adjacent_edges<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">% 空间中邻接边的长度</span>
  cos_value <span class="token operator">=</span> <span class="token function">dot</span><span class="token punctuation">(</span>adjacent_edges<span class="token punctuation">,</span>adjacent_edges_1<span class="token punctuation">)</span><span class="token operator">./</span><span class="token punctuation">...</span>
      length_of_adjacent_edges<span class="token operator">./</span><span class="token punctuation">[</span><span class="token function">length_of_adjacent_edges</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">:</span><span class="token keyword">end</span><span class="token punctuation">)</span> <span class="token function">length_of_adjacent_edges</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  beta <span class="token operator">=</span> <span class="token function">acos</span><span class="token punctuation">(</span>cos_value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">% 空间中的角度beta</span>
  alpha <span class="token operator">=</span> beta<span class="token operator">/</span><span class="token function">sum</span><span class="token punctuation">(</span>beta<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span><span class="token keyword">pi</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">% 计算对应的平面中的角度alpha</span>

  <span class="token comment">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span>
  <span class="token comment">% 计算平面多边形，实际上用MVC的话，就不再需要多边形的具体值了，</span>
  <span class="token comment">% 因为只需要角度和长度，在上步骤已经得出</span>
  theta <span class="token operator">=</span> alpha<span class="token operator">*</span><span class="token function">triu</span><span class="token punctuation">(</span><span class="token function">ones</span><span class="token punctuation">(</span><span class="token function">length</span><span class="token punctuation">(</span>alpha<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token function">eye</span><span class="token punctuation">(</span><span class="token function">length</span><span class="token punctuation">(</span>alpha<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  polygon_in_plane <span class="token operator">=</span> length_of_adjacent_edges<span class="token operator">.*</span><span class="token punctuation">[</span><span class="token function">cos</span><span class="token punctuation">(</span>theta<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sin</span><span class="token punctuation">(</span>theta<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token comment">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span>


  <span class="token comment">%% 广义重心坐标：均值重心坐标</span>
  tan_value <span class="token operator">=</span> <span class="token function">tan</span><span class="token punctuation">(</span>alpha<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  MVC_i <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token function">tan_value</span><span class="token punctuation">(</span><span class="token keyword">end</span><span class="token punctuation">)</span> <span class="token function">tan_value</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">:</span><span class="token keyword">end</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">+</span>tan_value<span class="token punctuation">)</span><span class="token operator">./</span><span class="token punctuation">...</span>
      length_of_adjacent_edges<span class="token punctuation">;</span>
  <span class="token function">MVC</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span>adjacent_vertices<span class="token punctuation">)</span> <span class="token operator">=</span> MVC_i<span class="token operator">/</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span>MVC_i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">end</span></code></pre></li>
<li><p>筛选出有用的MVC</p>
<pre class="language-matlab" data-language="matlab"><code class="language-matlab"><span class="token comment">% 只保留内部点的MVC</span>
MVC <span class="token operator">=</span> <span class="token function">MVC</span><span class="token punctuation">(</span><span class="token function">any</span><span class="token punctuation">(</span>MVC<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">:</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li>
<li><p>初始化边界点的<span class="math inline">\((u,v)\)</span>参数</p>
<pre class="language-matlab" data-language="matlab"><code class="language-matlab"><span class="token comment">%% 指定边界点的(u,v)  </span>
<span class="token comment">% 假定考虑参数化到[0,1]X[0,1]的正方形中</span>
chord <span class="token operator">=</span> <span class="token function">vecnorm</span><span class="token punctuation">(</span><span class="token function">v</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token function">boundary</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">:</span><span class="token keyword">end</span><span class="token punctuation">)</span> <span class="token function">boundary</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token function">v</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span>boundary<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
chord <span class="token operator">=</span> chord<span class="token operator">/</span><span class="token function">sum</span><span class="token punctuation">(</span>chord<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">;</span>
uv_ <span class="token operator">=</span> chord<span class="token operator">*</span><span class="token function">triu</span><span class="token punctuation">(</span><span class="token function">ones</span><span class="token punctuation">(</span><span class="token function">length</span><span class="token punctuation">(</span>chord<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token function">eye</span><span class="token punctuation">(</span><span class="token function">length</span><span class="token punctuation">(</span>chord<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">uv_1</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">:</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">uv_</span><span class="token punctuation">(</span>uv_ <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">&amp;</span> uv_ <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">uv_1</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">:</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token function">uv_2</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">:</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">uv_</span><span class="token punctuation">(</span>uv_ <span class="token operator">&lt;</span> <span class="token number">2</span> <span class="token operator">&amp;</span> uv_ <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token function">uv_2</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">:</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token function">uv_2</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token operator">-</span><span class="token function">uv_1</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">end</span><span class="token punctuation">)</span>
  <span class="token function">uv_2</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">else</span>
  <span class="token function">uv_1</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">end</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">end</span>
<span class="token function">uv_3</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">:</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token operator">-</span><span class="token function">uv_</span><span class="token punctuation">(</span>uv_ <span class="token operator">&lt;</span> <span class="token number">3</span> <span class="token operator">&amp;</span> uv_ <span class="token operator">>=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">uv_3</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">:</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token number">1</span><span class="token operator">-</span><span class="token function">uv_3</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token operator">-</span><span class="token function">uv_2</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token keyword">end</span><span class="token punctuation">)</span>
  <span class="token function">uv_3</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">else</span>
  <span class="token function">uv_2</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token keyword">end</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">end</span>
<span class="token function">uv_4</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">:</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token operator">-</span><span class="token function">uv_</span><span class="token punctuation">(</span>uv_ <span class="token operator">&lt;=</span> <span class="token number">4</span> <span class="token operator">&amp;</span> uv_ <span class="token operator">>=</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">uv_4</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">:</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token number">1</span><span class="token operator">-</span><span class="token function">uv_4</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token function">uv_3</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">end</span><span class="token punctuation">)</span>
  <span class="token function">uv_4</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">else</span>
  <span class="token function">uv_3</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">end</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">end</span>
uv_boundary <span class="token operator">=</span> <span class="token punctuation">[</span>uv_1 uv_2 uv_3 uv_4<span class="token punctuation">]</span><span class="token operator">'</span><span class="token punctuation">;</span></code></pre></li>
<li><p>构造最后一步中的稀疏线性系统</p>
<pre class="language-matlab" data-language="matlab"><code class="language-matlab"><span class="token comment">%% (I-Lambda_1)*uv_int = Lambda_2*uv_boundary</span>
Lambda_1 <span class="token operator">=</span> <span class="token function">MVC</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span><span class="token function">setdiff</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">:</span><span class="token function">length</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">,</span>boundary<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">% 构造Lambda_1</span>
Lambda_2 <span class="token operator">=</span> <span class="token function">MVC</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span>boundary<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">% 构造Lambda_2</span>
A <span class="token operator">=</span> <span class="token function">eye</span><span class="token punctuation">(</span><span class="token function">size</span><span class="token punctuation">(</span>Lambda_1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> Lambda_1<span class="token punctuation">;</span> <span class="token comment">% I-Lambda_1</span>
uv_Int <span class="token operator">=</span> A<span class="token operator">\</span>Lambda_2<span class="token operator">*</span>uv_boundary<span class="token punctuation">;</span>    <span class="token comment">% 解线性方程组</span>

<span class="token function">uv</span><span class="token punctuation">(</span><span class="token function">setdiff</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">:</span><span class="token function">length</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">,</span>boundary<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">:</span><span class="token punctuation">)</span> <span class="token operator">=</span> uv_Int<span class="token punctuation">;</span>
<span class="token function">uv</span><span class="token punctuation">(</span>boundary<span class="token punctuation">,</span><span class="token operator">:</span><span class="token punctuation">)</span> <span class="token operator">=</span> uv_boundary<span class="token punctuation">;</span></code></pre></li>
<li><p>可视化结果</p>
<pre class="language-matlab" data-language="matlab"><code class="language-matlab"><span class="token comment">%% 可视化结果</span>
<span class="token function">uv</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token function">plot_mesh</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span>f<span class="token punctuation">)</span>
figure
<span class="token function">plot_mesh</span><span class="token punctuation">(</span>uv<span class="token punctuation">,</span>f<span class="token punctuation">)</span></code></pre></li>
</ul>
<p><img src="http://img.ifish.ink/20201031/3.png" />
将绿白相见棋盘格贴图到模型表面可以直观感受参数化的好坏 <img
src="http://img.ifish.ink/20201031/4.png" /></p>
]]></content>
      <categories>
        <category>几何处理</category>
      </categories>
      <tags>
        <tag>MATLAB代码</tag>
        <tag>算法实现</tag>
        <tag>参数化</tag>
        <tag>均值重心坐标</tag>
      </tags>
  </entry>
  <entry>
    <title>参数曲线拟合</title>
    <url>/post/curvefitting.html</url>
    <content><![CDATA[<h3 id="曲线参数化">曲线参数化</h3>
<p>对于给定<span
class="math inline">\(\mathbb{R}^2\)</span>内一组有序点<span
class="math inline">\(\{\mathbf{P}_i=(x_i,y_i)\}_{i=1}^n\)</span>，找到一组合适的实数<span
class="math inline">\(\{t_i\}_{i=1}^n\)</span>，使得<span
class="math inline">\(t_i\)</span>与点<span
class="math inline">\(\mathbf{P}_i\)</span>一一对应。</p>
<p>下面是几种常用的曲线参数化算法：</p>
<ul>
<li><p>均匀参数化 <span class="math display">\[t_{i+1}-t_i=C\qquad
(C\text{是常数})\]</span></p></li>
<li><p>弦长参数化 <span
class="math display">\[t_{i+1}-t_i=\Vert\mathbf{P}_{i+1}-\mathbf{P}_i\Vert_2\]</span></p></li>
<li><p>中心参数化 <span
class="math display">\[t_{i+1}-t_i=\sqrt{\Vert\mathbf{P}_{i+1}-\mathbf{P}_i\Vert_2}\]</span></p></li>
<li><p>Foley-Nielsen参数化 <span class="math display">\[\begin{equation}
  t_{i+1}-t_i=\left\{
      \begin{array}{ll}
      d_i\left[1+\frac{3\hat{\alpha}_{i+1}d_{i+1}}{2(d_i+d_{i+1})}\right]
&amp; i=1\\
      d_i\left[1+\frac{3\hat{\alpha}_{i}d_{i-1}}{2(d_{i-1}+d_{i})}+\frac{3\hat{\alpha}_{i+1}d_{i+1}}{2(d_i+d_{i+1})}\right]
&amp; i=2,3\dots,n-2\\
      d_i\left[1+\frac{3\hat{\alpha}_{i}d_{i-1}}{2(d_{i-1}+d_{i})}\right]
&amp; i=n-1
      \end{array}
      \right.
  \end{equation}\]</span> <span
class="math display">\[d_i=\Vert\mathbf{P}_{i+1}-\mathbf{P}_i\Vert_2\qquad
\alpha_i=angle(\mathbf{P}_{i-1},\mathbf{P}_i,\mathbf{P}_{i+1})\qquad
\hat{\alpha}_i=\min\left\{\alpha_i,\frac{\pi}{2}\right\}\]</span></p></li>
</ul>
<h3 id="拟合参数曲线">拟合参数曲线</h3>
<p>对于给定<span
class="math inline">\(\mathbb{R}^2\)</span>内一组点<span
class="math inline">\(\{\mathbf{P}_i=(x_i,y_i)\}_{i=1}^n\)</span>，找到一个拟合这组点的向量值函数<span
class="math inline">\(\mathbf{P}=f(t):
\mathbb{R}\mapsto\mathbb{R}^2\)</span>，使得<span
class="math inline">\(f(t)\)</span>的轨迹尽可能靠近这组点。</p>
<h4 id="拉格朗日型参数曲线拟合">拉格朗日型参数曲线拟合</h4>
<p><span class="math display">\[\begin{equation}
\left[
    \begin{array}{c}
    x\\y
    \end{array}=f(t)=\left[
        \begin{array}{c}
        a_0\\b_0
        \end{array}
        \right]+\left[
        \begin{array}{c}
        a_1\\b_1
        \end{array}
        \right]t+\left[
        \begin{array}{c}
        a_2\\b_2
        \end{array}
        \right]t^2+\dots+\left[
        \begin{array}{c}
        a_{n-1}\\b_{n-1}
        \end{array}
        \right]t^{n-1}
    \right]
\end{equation}\]</span> 将<span
class="math inline">\(\{t_i,\mathbf{P}_i\}_{i=1}^n\)</span>代入上式得到如下线性系统：
<span class="math display">\[\begin{equation}
\left(
    \begin{array}{ccccc}
    1&amp;t_1&amp;t_1^2&amp;\cdots&amp;t_1^{n-1}\\
    1&amp;t_2&amp;t_2^2&amp;\cdots&amp;t_2^{n-1}\\
    \vdots&amp;\vdots&amp;\vdots&amp;\ddots&amp;\vdots\\
    1&amp;t_n&amp;t_n^2&amp;\cdots&amp;t_n^{n-1}
    \end{array}
    \right)\left(
        \begin{array}{cc}
        a_0&amp;b_0\\
        a_1&amp;b_1\\
        \vdots&amp;\vdots\\
        a_{n-1}&amp;b_{n-1}
        \end{array}
        \right)=\left(
            \begin{array}{cc}
            x_1&amp;y_1\\
            x_2&amp;y_2\\
            \vdots&amp;\vdots\\
            x_n&amp;y_n
            \end{array}
            \right)
\end{equation}\]</span> 通过求解上式线性系统可得到<span
class="math inline">\(\mathbf{a}=[a_0,a_1,\dots,a_{n-1}]^{\mathsf{T}}\)</span>和<span
class="math inline">\(\mathbf{b}=[b_0,b_1,\dots,b_{n-1}]^{\mathsf{T}}\)</span>。</p>
<h4 id="高斯基函数型参数曲线拟合">高斯基函数型参数曲线拟合</h4>
<p><span class="math display">\[\begin{equation}
\left[
    \begin{array}{c}
    x\\y
    \end{array}=f(t)=\left[
        \begin{array}{c}
        a_0\\b_0
        \end{array}
        \right]+\left[
        \begin{array}{c}
        a_1\\b_1
        \end{array}
        \right]g_1(t)+\left[
        \begin{array}{c}
        a_2\\b_2
        \end{array}
        \right]g_2(t)+\dots+\left[
        \begin{array}{c}
        a_{n-1}\\b_{n-1}
        \end{array}
        \right]g_n(t)
    \right]
\end{equation}\]</span> 其中<span
class="math inline">\(g_i(t)=exp(-(t-t_i)^2/(2\sigma^2))\)</span>，将<span
class="math inline">\(\{t_i,\mathbf{P}_i\}_{i=1}^n\)</span>代入上式可得到如下线性系统：
<span class="math display">\[\begin{equation}
\left(
    \begin{array}{ccccc}
    1&amp;g_1(t_1)&amp;g_2(t_1)&amp;\cdots&amp;g_n(t_1)\\
    1&amp;g_1(t_2)&amp;g_2(t_2)&amp;\cdots&amp;g_n(t_2)\\
    \vdots&amp;\vdots&amp;\vdots&amp;\ddots&amp;\vdots\\
    1&amp;g_1(t_n)&amp;g_2(t_n)&amp;\cdots&amp;g_n(t_n)
    \end{array}
    \right)\left(
        \begin{array}{cc}
        a_0&amp;b_0\\
        a_1&amp;b_1\\
        \vdots&amp;\vdots\\
        a_{n-1}&amp;b_{n-1}
        \end{array}
        \right)=\left(
            \begin{array}{cc}
            x_1&amp;y_1\\
            x_2&amp;y_2\\
            \vdots&amp;\vdots\\
            x_n&amp;y_n
            \end{array}
            \right)
\end{equation}\]</span> 可以发现上式左边系数矩阵维数为<span
class="math inline">\(n\times(n+1)\)</span>，未知数个数多余线性无关的方程个数，方程解不唯一。可添加单位1约束：<span
class="math inline">\(\sum a_i=1\)</span>和<span
class="math inline">\(\sum
b_i=1\)</span>使得方程有唯一解，则得到如下方程： <span
class="math display">\[\begin{equation}
\left(
    \begin{array}{ccccc}
    1&amp;g_1(t_1)&amp;g_2(t_1)&amp;\cdots&amp;g_n(t_1)\\
    1&amp;g_1(t_2)&amp;g_2(t_2)&amp;\cdots&amp;g_n(t_2)\\
    \vdots&amp;\vdots&amp;\vdots&amp;\ddots&amp;\vdots\\
    1&amp;g_1(t_n)&amp;g_2(t_n)&amp;\cdots&amp;g_n(t_n)\\
    1&amp;1&amp;1&amp;\cdots&amp;1
    \end{array}
    \right)\left(
        \begin{array}{cc}
        a_0&amp;b_0\\
        a_1&amp;b_1\\
        \vdots&amp;\vdots\\
        a_{n-1}&amp;b_{n-1}
        \end{array}
        \right)=\left(
            \begin{array}{cc}
            x_1&amp;y_1\\
            x_2&amp;y_2\\
            \vdots&amp;\vdots\\
            x_n&amp;y_n\\
            1&amp;1
            \end{array}
            \right)
\end{equation}\]</span> 通过求解上式线性系统可得到<span
class="math inline">\(\mathbf{a}=[a_0,a_1,\dots,a_{n-1}]^{\mathsf{T}}\)</span>和<span
class="math inline">\(\mathbf{b}=[b_0,b_1,\dots,b_{n-1}]^{\mathsf{T}}\)</span>。</p>
<h4 id="rbf算法拟合参数曲线">RBF算法拟合参数曲线</h4>
<p><span class="math display">\[\begin{equation}
\left[
    \begin{array}{c}
    x\\y
    \end{array}
    \right]=f(t)=\left[
    \begin{array}{c}
    \omega_0+\sum_{i=1}^m\omega_ig_{0,1}(a_it+b_i)\\
    \gamma_0+\sum_{i=1}^m\gamma_ig_{0,1}(\alpha_it+\beta_i)
    \end{array}
    \right]
\end{equation}\]</span> 分别对上式中两个分量运用RBF算法，如下图所示 <img
src="/images/imgs/1222_1.png"
alt="以高斯函数为基函数的f(t)的网络图" /></p>
<h4 id="最小二乘型参数曲线拟合">最小二乘型参数曲线拟合</h4>
<p>在拉格朗日型函数的基础上，考虑使用最高次数不高于<span
class="math inline">\(m(m&lt;n)\)</span>的多项式作为基函数。 <span
class="math display">\[\begin{equation}
\left[
    \begin{array}{c}
    x\\y
    \end{array}=f(t)=\left[
        \begin{array}{c}
        a_0\\b_0
        \end{array}
        \right]+\left[
        \begin{array}{c}
        a_1\\b_1
        \end{array}
        \right]t+\left[
        \begin{array}{c}
        a_2\\b_2
        \end{array}
        \right]t^2+\dots+\left[
        \begin{array}{c}
        a_{m}\\b_{m}
        \end{array}
        \right]t^m
    \right]
\end{equation}\]</span> 将<span
class="math inline">\(\{t_i,\mathbf{P}_i\}_{i=1}^n\)</span>代入上式可得到如下线性系统：
<span class="math display">\[\mathbf{AX}=\mathbf{P}\]</span> 其中 <span
class="math display">\[\begin{equation}
\mathbf{A}=\left(
    \begin{array}{ccccc}
    1&amp;t_1&amp;t_1^2&amp;\cdots&amp;t_1^m\\
    1&amp;t_2&amp;t_2^2&amp;\cdots&amp;t_2^m\\
    \vdots&amp;\vdots&amp;\vdots&amp;\ddots&amp;\vdots\\
    1&amp;t_n&amp;t_n^2&amp;\cdots&amp;t_n^m
    \end{array}
    \right)\qquad \mathbf{X}=\left(
        \begin{array}{cc}
        a_0&amp;b_0\\
        a_1&amp;b_1\\
        \vdots&amp;\vdots\\
        a_m&amp;b_m
        \end{array}
        \right)\qquad\mathbf{P}=\left(
            \begin{array}{cc}
            x_1&amp;y_1\\
            x_2&amp;y_2\\
            \vdots&amp;\vdots\\
            x_n&amp;y_n
            \end{array}
            \right)
\end{equation}\]</span> 通过对上式做最小二乘得到 <span
class="math display">\[(\mathbf{A}^{\mathsf{T}}\mathbf{A})\mathbf{X}=\mathbf{A}^{\mathsf{T}}\mathbf{P}\]</span>
通过求解上式线性系统可得到<span
class="math inline">\(\mathbf{a}=[a_0,a_1,\dots,a_{n-1}]^{\mathsf{T}}\)</span>和<span
class="math inline">\(\mathbf{b}=[b_0,b_1,\dots,b_{n-1}]^{\mathsf{T}}\)</span>。</p>
<h4 id="岭回归型参数曲线拟合">岭回归型参数曲线拟合</h4>
<p>在最小二乘型拟合中添加正则约束，上式变为 <span
class="math display">\[(\mathbf{A}^{\mathsf{T}}\mathbf{A}+\lambda\mathbf{E})\mathbf{X}=\mathbf{A}^{\mathsf{T}}\mathbf{P}\]</span>
通过求解上式线性系统可得到<span
class="math inline">\(\mathbf{a}=[a_0,a_1,\dots,a_{n-1}]^{\mathsf{T}}\)</span>和<span
class="math inline">\(\mathbf{b}=[b_0,b_1,\dots,b_{n-1}]^{\mathsf{T}}\)</span>。</p>
<h3 id="数值试验">数值试验</h3>
<h4 id="主要代码">主要代码</h4>
<ul>
<li><p>均匀参数化</p>
<p><pre class="language-cpp" data-language="cpp"><code class="language-cpp">Eigen<span class="token double-colon punctuation">::</span>VectorXf <span class="token function">uniformParameterization</span><span class="token punctuation">(</span><span class="token keyword">int</span> numOfPoints<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    Eigen<span class="token double-colon punctuation">::</span>VectorXf y <span class="token operator">=</span> Eigen<span class="token double-colon punctuation">::</span><span class="token class-name">VectorXf</span><span class="token double-colon punctuation">::</span><span class="token function">Zero</span><span class="token punctuation">(</span>numOfPoints<span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>numOfPoints<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>
        y<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
    y <span class="token operator">/=</span> y<span class="token punctuation">[</span>numOfPoints <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">return</span> y<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre></p></li>
<li><p>弦长参数化</p>
<p><pre class="language-cpp" data-language="cpp"><code class="language-cpp">Eigen<span class="token double-colon punctuation">::</span>VectorXf <span class="token function">chordParameterization</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>Ubpa<span class="token double-colon punctuation">::</span>pointf2<span class="token operator">></span> points<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> n <span class="token operator">=</span> points<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Eigen<span class="token double-colon punctuation">::</span>VectorXf y <span class="token operator">=</span> Eigen<span class="token double-colon punctuation">::</span><span class="token class-name">VectorXf</span><span class="token double-colon punctuation">::</span><span class="token function">Zero</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>
        y<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> y<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span>points<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>points<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">norm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    y <span class="token operator">/=</span> y<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> y<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre></p></li>
<li><p>中心参数化</p>
<p><pre class="language-cpp" data-language="cpp"><code class="language-cpp">Eigen<span class="token double-colon punctuation">::</span>VectorXf <span class="token function">centripetalParameterization</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>Ubpa<span class="token double-colon punctuation">::</span>pointf2<span class="token operator">></span> points<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> n <span class="token operator">=</span> points<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Eigen<span class="token double-colon punctuation">::</span>VectorXf y <span class="token operator">=</span> Eigen<span class="token double-colon punctuation">::</span><span class="token class-name">VectorXf</span><span class="token double-colon punctuation">::</span><span class="token function">Zero</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>
        y<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> y<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token punctuation">(</span>points<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>points<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">norm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    y <span class="token operator">/=</span> y<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> y<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre></p></li>
<li><p>Foley-Nielsen参数化</p>
<p><pre class="language-cpp" data-language="cpp"><code class="language-cpp">Eigen<span class="token double-colon punctuation">::</span>VectorXf <span class="token function">FoleyParameterization</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span> Ubpa<span class="token double-colon punctuation">::</span>pointf2<span class="token operator">></span> points<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> n <span class="token operator">=</span> points<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Eigen<span class="token double-colon punctuation">::</span>VectorXf y <span class="token operator">=</span> Eigen<span class="token double-colon punctuation">::</span><span class="token class-name">VectorXf</span><span class="token double-colon punctuation">::</span><span class="token function">Zero</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> y<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token keyword">return</span> y<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
    Eigen<span class="token double-colon punctuation">::</span>VectorXf dist <span class="token operator">=</span> Eigen<span class="token double-colon punctuation">::</span><span class="token class-name">VectorXf</span><span class="token double-colon punctuation">::</span><span class="token function">Zero</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    Eigen<span class="token double-colon punctuation">::</span>VectorXf alpha <span class="token operator">=</span> Eigen<span class="token double-colon punctuation">::</span><span class="token class-name">VectorXf</span><span class="token double-colon punctuation">::</span><span class="token function">Zero</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>
        dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>points<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>points<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">norm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">float</span> cosvalue <span class="token operator">=</span> <span class="token punctuation">(</span>points<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>points<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">cos_theta</span><span class="token punctuation">(</span> points<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span> points<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        alpha<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">min</span><span class="token punctuation">(</span>PI<span class="token operator">-</span><span class="token function">acos</span><span class="token punctuation">(</span>cosvalue<span class="token punctuation">)</span><span class="token punctuation">,</span> PI<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token punctuation">&#125;</span>
    y<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> dist<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">1.5</span><span class="token operator">*</span>alpha<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span>dist<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">/</span><span class="token punctuation">(</span>dist<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span>dist<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        y<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> y<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>dist<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">1.5</span><span class="token operator">*</span>alpha<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span>dist<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">/</span> <span class="token punctuation">(</span>dist<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+</span>dist<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1.5</span><span class="token operator">*</span>alpha<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">*</span>dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">/</span> <span class="token punctuation">(</span>dist<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    y<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> y<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+</span>dist<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">1.5</span><span class="token operator">*</span>alpha<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">*</span>dist<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">/</span><span class="token punctuation">(</span>dist<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">+</span>dist<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    y <span class="token operator">/=</span> y<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> y<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre></p></li>
</ul>
<h4 id="实验结果">实验结果</h4>
<p><img src="/images/imgs/1222_2.png"
alt="高斯基函数型拟合结果（左）与RBF拟合结果（右）对比" /> <img
src="/images/imgs/1222_3.png"
alt="不同参数化对于5阶最小二乘拟合结果的影响。从左到右参数化类型依次为弦长参数化、中心参数化、均匀参数化和Foley-Nielsen参数化" />
<img src="/images/imgs/1222_4.png"
alt="不同参数化对高斯基函数拟合结果的影响。从左到右参数化类型依次为弦长参数化、中心参数化、均匀参数化和Foley-Nielsen参数化" /></p>
]]></content>
      <categories>
        <category>曲线曲面</category>
      </categories>
      <tags>
        <tag>拟合</tag>
        <tag>C/C++</tag>
        <tag>曲线参数化</tag>
      </tags>
  </entry>
  <entry>
    <title>均值重心坐标Mean Value Coordinates In 2D代码实现</title>
    <url>/post/d033f67a.html</url>
    <content><![CDATA[<h4
id="c实现二维多边形均值重心坐标代码可能有冗余未优化代码">c++实现二维多边形均值重心坐标（代码可能有冗余，未优化代码！）：</h4>
<blockquote>
<p>关于三维中均值重心坐标的实现可参考我的另一篇博客：<a
href="https://www.ifish.ink/post/4d3c170c.html"
title="均值重心坐标Mean Value Coordinates In 3D代码实现">均值重心坐标Mean
Value Coordinates In 3D代码实现</a></p>
</blockquote>
<span id="more"></span>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/*
/// @brief      mean value coordinates in 2D
/// @details    
/// @param[in]  p,postiveity
/// @return     
/// @attention  
*/</span>
VectorXd <span class="token class-name">MyPolygon</span><span class="token double-colon punctuation">::</span><span class="token function">meanValueCoordinates</span><span class="token punctuation">(</span>Vector2d <span class="token operator">&amp;</span>p<span class="token punctuation">,</span> <span class="token keyword">bool</span> <span class="token operator">&amp;</span>postiveity<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    postiveity <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> numOfV <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-></span><span class="token function">getNumberOfVertices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    VectorXd mvc_coor <span class="token operator">=</span> <span class="token class-name">VectorXd</span><span class="token double-colon punctuation">::</span><span class="token function">Zero</span><span class="token punctuation">(</span>numOfV<span class="token punctuation">)</span><span class="token punctuation">;</span>
    VectorXd tanalpha <span class="token operator">=</span> <span class="token class-name">VectorXd</span><span class="token double-colon punctuation">::</span><span class="token function">Zero</span><span class="token punctuation">(</span>numOfV<span class="token punctuation">)</span><span class="token punctuation">;</span>
    MatrixXd temp <span class="token operator">=</span> <span class="token class-name">MatrixXd</span><span class="token double-colon punctuation">::</span><span class="token function">Zero</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> numOfV<span class="token punctuation">)</span><span class="token punctuation">;</span>
    MatrixXd unit_v <span class="token operator">=</span> <span class="token class-name">MatrixXd</span><span class="token double-colon punctuation">::</span><span class="token function">Zero</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> numOfV<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numOfV<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        temp<span class="token punctuation">.</span><span class="token function">col</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-></span>vertices<span class="token punctuation">.</span><span class="token function">col</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-</span> p<span class="token punctuation">;</span>
        unit_v<span class="token punctuation">.</span><span class="token function">col</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">=</span> temp<span class="token punctuation">.</span><span class="token function">col</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">normalized</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numOfV<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token comment">//Vector3d cor = Vector3d(unit_v(0, i), unit_v(1, i), 0).cross(Vector3d(unit_v(0, (i + 1) % numOfV), unit_v(1, (i + 1) % numOfV), 0));</span>
        <span class="token comment">//tanalpha[i] = (1 - unit_v.col(i).dot(unit_v.col((i + 1) % numOfV))) / (cor.norm())*(2 * (cor.dot(Vector3d(0, 0, 1)) &lt; 0) - 1);</span>
        tanalpha<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> <span class="token function">unit_v</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> numOfV<span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">unit_v</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">unit_v</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> numOfV<span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">unit_v</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token function">unit_v</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> numOfV<span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">unit_v</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">unit_v</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">unit_v</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> numOfV<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numOfV<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        mvc_coor<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>tanalpha<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> tanalpha<span class="token punctuation">[</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">+</span> numOfV<span class="token punctuation">)</span> <span class="token operator">%</span> numOfV<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span> temp<span class="token punctuation">.</span><span class="token function">col</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">norm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    mvc_coor <span class="token operator">/=</span> mvc_coor<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    postiveity <span class="token operator">=</span> mvc_coor<span class="token punctuation">.</span><span class="token function">minCoeff</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> mvc_coor <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token keyword">return</span> mvc_coor<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>
<hr />
<p><strong>如有任何疑问或建议欢迎下方留言 :-)</strong></p>
]]></content>
      <categories>
        <category>几何处理</category>
      </categories>
      <tags>
        <tag>算法实现</tag>
        <tag>均值重心坐标</tag>
        <tag>C++代码</tag>
      </tags>
  </entry>
  <entry>
    <title>均值重心坐标Mean Value Coordinates In 3D代码实现</title>
    <url>/post/4d3c170c.html</url>
    <content><![CDATA[<h4 id="c实现">c++实现：</h4>
<blockquote>
<p>关于二维中均值重心坐标的实现可参考我的另一篇博客：<a
href="https://www.ifish.ink/post/d033f67a.html"
title="均值重心坐标Mean Value Coordinates In 2D代码实现">均值重心坐标Mean
Value Coordinates In 2D代码实现</a></p>
</blockquote>
<span id="more"></span>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/*
/// @brief      mean value coordinates in 3D
/// @details    
/// @param[in]  p: 
/// @return     
/// @attention  
*/</span> 
VectorXd <span class="token class-name">MyMesh</span><span class="token double-colon punctuation">::</span><span class="token function">meanValueCoordinates</span><span class="token punctuation">(</span>Vector3d p<span class="token punctuation">,</span> <span class="token keyword">bool</span> <span class="token operator">&amp;</span>postiveity<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    postiveity <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token comment">//this->faces = this->fixMesh().faces;   // repair the faces index, so that the all normal vector of faces outward (inward)</span>
    VectorXd mvc_coor <span class="token operator">=</span> <span class="token class-name">VectorXd</span><span class="token double-colon punctuation">::</span><span class="token function">Zero</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>numberOfVertices<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// get projection vertices on unit sphere</span>
    Matrix<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span>Dynamic<span class="token operator">></span> pro_vertices<span class="token punctuation">;</span>

    pro_vertices<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token operator">-></span>numberOfVertices<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token operator">-></span>numberOfVertices<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">double</span> r <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>vertices<span class="token punctuation">.</span><span class="token function">col</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-</span> p<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">norm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">pro_vertices</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span><span class="token function">vertices</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">p</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> r<span class="token punctuation">;</span>
        <span class="token function">pro_vertices</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span><span class="token function">vertices</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">p</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> r<span class="token punctuation">;</span>
        <span class="token function">pro_vertices</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span><span class="token function">vertices</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">p</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> r<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    Matrix<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token operator">></span> T<span class="token punctuation">;</span>
    Vector3d n0<span class="token punctuation">,</span> n1<span class="token punctuation">,</span> n2<span class="token punctuation">;</span>
    <span class="token keyword">double</span> beta0<span class="token punctuation">,</span> beta1<span class="token punctuation">,</span> beta2<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token operator">-></span>numberOfFaces<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> i0<span class="token punctuation">,</span> i1<span class="token punctuation">,</span> i2<span class="token punctuation">;</span>     <span class="token comment">// index of vertices on the current face</span>
        i0 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-></span><span class="token function">faces</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        i1 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-></span><span class="token function">faces</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        i2 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-></span><span class="token function">faces</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>

        T<span class="token punctuation">.</span><span class="token function">col</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">=</span> pro_vertices<span class="token punctuation">.</span><span class="token function">col</span><span class="token punctuation">(</span>i0<span class="token punctuation">)</span><span class="token punctuation">;</span>
        T<span class="token punctuation">.</span><span class="token function">col</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> pro_vertices<span class="token punctuation">.</span><span class="token function">col</span><span class="token punctuation">(</span>i1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        T<span class="token punctuation">.</span><span class="token function">col</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">=</span> pro_vertices<span class="token punctuation">.</span><span class="token function">col</span><span class="token punctuation">(</span>i2<span class="token punctuation">)</span><span class="token punctuation">;</span>

        n0 <span class="token operator">=</span> pro_vertices<span class="token punctuation">.</span><span class="token function">col</span><span class="token punctuation">(</span>i0<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">cross</span><span class="token punctuation">(</span>pro_vertices<span class="token punctuation">.</span><span class="token function">col</span><span class="token punctuation">(</span>i1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">normalized</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        n1 <span class="token operator">=</span> pro_vertices<span class="token punctuation">.</span><span class="token function">col</span><span class="token punctuation">(</span>i1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">cross</span><span class="token punctuation">(</span>pro_vertices<span class="token punctuation">.</span><span class="token function">col</span><span class="token punctuation">(</span>i2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">normalized</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        n2 <span class="token operator">=</span> pro_vertices<span class="token punctuation">.</span><span class="token function">col</span><span class="token punctuation">(</span>i2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">cross</span><span class="token punctuation">(</span>pro_vertices<span class="token punctuation">.</span><span class="token function">col</span><span class="token punctuation">(</span>i0<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">normalized</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// angle</span>
        beta0 <span class="token operator">=</span> <span class="token function">acos</span><span class="token punctuation">(</span>pro_vertices<span class="token punctuation">.</span><span class="token function">col</span><span class="token punctuation">(</span>i0<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">dot</span><span class="token punctuation">(</span>pro_vertices<span class="token punctuation">.</span><span class="token function">col</span><span class="token punctuation">(</span>i1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        beta1 <span class="token operator">=</span> <span class="token function">acos</span><span class="token punctuation">(</span>pro_vertices<span class="token punctuation">.</span><span class="token function">col</span><span class="token punctuation">(</span>i1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">dot</span><span class="token punctuation">(</span>pro_vertices<span class="token punctuation">.</span><span class="token function">col</span><span class="token punctuation">(</span>i2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        beta2 <span class="token operator">=</span> <span class="token function">acos</span><span class="token punctuation">(</span>pro_vertices<span class="token punctuation">.</span><span class="token function">col</span><span class="token punctuation">(</span>i2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">dot</span><span class="token punctuation">(</span>pro_vertices<span class="token punctuation">.</span><span class="token function">col</span><span class="token punctuation">(</span>i0<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        mvc_coor<span class="token punctuation">[</span>i0<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token punctuation">(</span>beta1 <span class="token operator">+</span> beta0<span class="token operator">*</span>n0<span class="token punctuation">.</span><span class="token function">dot</span><span class="token punctuation">(</span>n1<span class="token punctuation">)</span> <span class="token operator">+</span> beta2<span class="token operator">*</span>n2<span class="token punctuation">.</span><span class="token function">dot</span><span class="token punctuation">(</span>n1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> pro_vertices<span class="token punctuation">.</span><span class="token function">col</span><span class="token punctuation">(</span>i0<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">dot</span><span class="token punctuation">(</span>n1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mvc_coor<span class="token punctuation">[</span>i1<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token punctuation">(</span>beta2 <span class="token operator">+</span> beta1<span class="token operator">*</span>n1<span class="token punctuation">.</span><span class="token function">dot</span><span class="token punctuation">(</span>n2<span class="token punctuation">)</span> <span class="token operator">+</span> beta0<span class="token operator">*</span>n0<span class="token punctuation">.</span><span class="token function">dot</span><span class="token punctuation">(</span>n2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> pro_vertices<span class="token punctuation">.</span><span class="token function">col</span><span class="token punctuation">(</span>i1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">dot</span><span class="token punctuation">(</span>n2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mvc_coor<span class="token punctuation">[</span>i2<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token punctuation">(</span>beta0 <span class="token operator">+</span> beta2<span class="token operator">*</span>n2<span class="token punctuation">.</span><span class="token function">dot</span><span class="token punctuation">(</span>n0<span class="token punctuation">)</span> <span class="token operator">+</span> beta1<span class="token operator">*</span>n1<span class="token punctuation">.</span><span class="token function">dot</span><span class="token punctuation">(</span>n0<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> pro_vertices<span class="token punctuation">.</span><span class="token function">col</span><span class="token punctuation">(</span>i2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">dot</span><span class="token punctuation">(</span>n0<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token operator">-></span>numberOfVertices<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        mvc_coor<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/=</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>vertices<span class="token punctuation">.</span><span class="token function">col</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-</span> p<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">norm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    mvc_coor <span class="token operator">/=</span> mvc_coor<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    postiveity <span class="token operator">=</span> mvc_coor<span class="token punctuation">.</span><span class="token function">minCoeff</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> mvc_coor<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>
<hr />
<p><strong>如有任何疑问或建议欢迎下方留言 :-)</strong></p>
]]></content>
      <categories>
        <category>几何处理</category>
      </categories>
      <tags>
        <tag>算法实现</tag>
        <tag>均值重心坐标</tag>
        <tag>C++代码</tag>
      </tags>
  </entry>
  <entry>
    <title>基于极大似然坐标的图像变形的MATLAB实现</title>
    <url>/post/mlc2d.html</url>
    <content><![CDATA[<p><img
src="https://github.com/changqj/Maximum-Likelihood-Coordinates-2D/raw/main/doc/teaser.jpg" /></p>
<p>This is an implementation of the paper "<a
href="https://doi.org/10.1111/cgf.14908">Maximum likelihood
coordinates</a>".</p>
<h2 id="usage">Usage</h2>
<p>Start by cloning this repository, making sure to pass the
<code>--recursive</code> flag to grab all the dependencies. If you
forgot, then you can <code>git submodule update --init</code> instead.
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone <span class="token parameter variable">--recursive</span> https://github.com/changqj/Maximum-Likelihood-Coordinates-2D.git mlc2d</code></pre></p>
<p>Now, you can directly run the <code>main.m</code> program in MATLAB,
after a few seconds you will see a GUI interface. Then you can set a
target polygon by loading from file or dragging the vertices with the
mouse. Select the type of barycentric coordinates through the buttons
below. <img
src="https://github.com/changqj/Maximum-Likelihood-Coordinates-2D/raw/main/doc/G.gif"
alt="loading from file" /> <img
src="https://github.com/changqj/Maximum-Likelihood-Coordinates-2D/raw/main/doc/G0.gif"
alt="dragging" /></p>
<p>Due to the rough processing in MATLAB GUI, the visualization image in
the MATLAB GUI is blurry, but a clear image can be obtained in MeshLab
(or other visualization tools) through <code>.obj</code>, the deformed
image file will be generated in real time in <code>/data/</code> folder
and stored in textured <code>.obj</code> format.</p>
<p><img
src="https://github.com/changqj/Maximum-Likelihood-Coordinates-2D/raw/main/doc/1.png" /></p>
<p><img
src="https://github.com/changqj/Maximum-Likelihood-Coordinates-2D/raw/main/doc/6.png" /></p>
<h2 id="example">Example</h2>
<table>
<colgroup>
<col style="width: 25%" />
<col style="width: 25%" />
<col style="width: 25%" />
<col style="width: 25%" />
</colgroup>
<thead>
<tr>
<th><img
src="https://github.com/changqj/Maximum-Likelihood-Coordinates-2D/raw/main/doc/G_source.png" /></th>
<th><img
src="https://github.com/changqj/Maximum-Likelihood-Coordinates-2D/raw/main/doc/G_MVC.png" /></th>
<th><img
src="https://github.com/changqj/Maximum-Likelihood-Coordinates-2D/raw/main/doc/G_IC.png" /></th>
<th><img
src="https://github.com/changqj/Maximum-Likelihood-Coordinates-2D/raw/main/doc/G_HBC.png" /></th>
</tr>
</thead>
<tbody>
<tr>
<td>source image</td>
<td>mean value coordinates</td>
<td>iterative coordinates</td>
<td>harmonic coordinates</td>
</tr>
<tr>
<td><img
src="https://github.com/changqj/Maximum-Likelihood-Coordinates-2D/raw/main/doc/G_MEC1.png" /></td>
<td><img
src="https://github.com/changqj/Maximum-Likelihood-Coordinates-2D/raw/main/doc/G_MEC2.png" /></td>
<td><img
src="https://github.com/changqj/Maximum-Likelihood-Coordinates-2D/raw/main/doc/G_MLC.png" /></td>
<td><img
src="https://github.com/changqj/Maximum-Likelihood-Coordinates-2D/raw/main/doc/G_MLC_WITHOUT_S.png" /></td>
</tr>
<tr>
<td>maximum entropy coordinates (prior 1)</td>
<td>maximum entropy coordinates (prior 2)</td>
<td>maximum likelihood coordinates</td>
<td>maximum likelihood without scaling</td>
</tr>
</tbody>
</table>
<h3 id="basis-function">Basis function</h3>
<p>You can visualize the basis functions in two ways:</p>
<ul>
<li><p>diaplay through the figure window of MATLAB</p>
<pre class="language-matlab" data-language="matlab"><code class="language-matlab"><span class="token function">showbase</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>mlcoors<span class="token punctuation">,</span><span class="token function">tri</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>xx<span class="token punctuation">,</span>yy<span class="token punctuation">,</span>v0<span class="token punctuation">)</span></code></pre>
<p><img
src="https://github.com/changqj/Maximum-Likelihood-Coordinates-2D/raw/main/doc/2.png" /></p></li>
<li><p>display with other visualization software by generating textured
<code>.obj</code> file.</p>
<pre class="language-matlab" data-language="matlab"><code class="language-matlab"><span class="token comment">% to plot the base functions</span>


name <span class="token operator">=</span> <span class="token string">'mlc'</span><span class="token punctuation">;</span>

z <span class="token operator">=</span> mlcoors<span class="token operator">'</span><span class="token punctuation">;</span>   <span class="token comment">% n x #</span>

<span class="token comment">% set a mtl file</span>
fid <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'data/base_texture.obj.mtl'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">fprintf</span><span class="token punctuation">(</span>fid<span class="token punctuation">,</span><span class="token string">'# Generated by MATLAB\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">fprintf</span><span class="token punctuation">(</span>fid<span class="token punctuation">,</span><span class="token string">'# Wavefront material file\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">fprintf</span><span class="token punctuation">(</span>fid<span class="token punctuation">,</span><span class="token string">'newmtl material_0\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">fprintf</span><span class="token punctuation">(</span>fid<span class="token punctuation">,</span><span class="token string">'Ka 0.200000 0.200000 0.200000\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">fprintf</span><span class="token punctuation">(</span>fid<span class="token punctuation">,</span><span class="token string">'Kd 0.752941 0.752941 0.752941\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">fprintf</span><span class="token punctuation">(</span>fid<span class="token punctuation">,</span><span class="token string">'Ks 1.000000 1.000000 1.000000\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">fprintf</span><span class="token punctuation">(</span>fid<span class="token punctuation">,</span><span class="token string">'Tr 1.000000\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">fprintf</span><span class="token punctuation">(</span>fid<span class="token punctuation">,</span><span class="token string">'illum 2\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">fprintf</span><span class="token punctuation">(</span>fid<span class="token punctuation">,</span><span class="token string">'Ns 0.000000\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">fprintf</span><span class="token punctuation">(</span>fid<span class="token punctuation">,</span><span class="token string">'map_Kd %s\n'</span><span class="token punctuation">,</span><span class="token punctuation">[</span> <span class="token string">'./gbc_bar.png'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">fclose</span><span class="token punctuation">(</span>fid<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">load</span><span class="token punctuation">(</span><span class="token string">'colorbar_mlc.mat'</span><span class="token punctuation">)</span>
colorbar_mlc <span class="token operator">=</span> <span class="token function">colorbar_mlc</span><span class="token punctuation">(</span><span class="token keyword">end</span><span class="token operator">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">:</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
bar <span class="token operator">=</span> colorbar_mlc<span class="token operator">'</span><span class="token punctuation">;</span>
bar<span class="token operator">=</span> <span class="token function">repmat</span><span class="token punctuation">(</span>bar<span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
bar <span class="token operator">=</span> <span class="token function">reshape</span><span class="token punctuation">(</span>bar<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
bar <span class="token operator">=</span> <span class="token function">reshape</span><span class="token punctuation">(</span>bar<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
bar <span class="token operator">=</span> <span class="token function">permute</span><span class="token punctuation">(</span>bar<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span> <span class="token number">2</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
bar<span class="token operator">=</span> <span class="token function">repmat</span><span class="token punctuation">(</span>bar<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">imwrite</span><span class="token punctuation">(</span>bar<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'data/gbc_bar.png'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">% close(2)</span>
<span class="token keyword">for</span> <span class="token number">i</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">:</span><span class="token function">size</span><span class="token punctuation">(</span>z<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>

    bar_uv <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token function">ones</span><span class="token punctuation">(</span><span class="token function">length</span><span class="token punctuation">(</span>xx<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">0.5</span><span class="token punctuation">,</span><span class="token function">z</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">writeOBJ</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'data/'</span> name <span class="token string">'_bf_'</span> <span class="token function">num2str</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span> <span class="token string">'.obj'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>xx <span class="token number">1</span><span class="token operator">-</span>yy <span class="token punctuation">...</span>
        <span class="token function">zeros</span><span class="token punctuation">(</span><span class="token function">length</span><span class="token punctuation">(</span>xx<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">...</span>
        <span class="token function">tri</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4</span> <span class="token number">3</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>bar_uv<span class="token punctuation">)</span><span class="token punctuation">;</span>
    fid <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'data/'</span> name <span class="token string">'_bf_'</span> <span class="token function">num2str</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span> <span class="token string">'.obj'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fprintf</span><span class="token punctuation">(</span>fid<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'mtllib ./'</span><span class="token punctuation">,</span><span class="token string">'base_texture.obj.mtl\n'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fclose</span><span class="token punctuation">(</span>fid<span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token keyword">end</span></code></pre>
<p>After executing the above code, the <code>.obj</code> file of the
basis functions will be in the <code>/data/</code> folder.</p>
<p><img
src="https://github.com/changqj/Maximum-Likelihood-Coordinates-2D/raw/main/doc/3.png" /></p>
<p><img
src="https://github.com/changqj/Maximum-Likelihood-Coordinates-2D/raw/main/doc/4.png" /></p>
<p><img
src="https://github.com/changqj/Maximum-Likelihood-Coordinates-2D/raw/main/doc/5.png" /></p></li>
</ul>
<h2 id="citation">Citation</h2>
<pre class="language-bibtex" data-language="bibtex"><code class="language-bibtex">@Article&#123;Chang:2023:MLC,
	author	&#x3D;	&#123;Qingjun Chang and Chongyang Deng and Kai Hormann&#125;,
	title 	&#x3D; 	&#123;Maximum likelihood coordinates&#125;,
	journal	&#x3D;	&#123;Computer Graphics Forum&#125;,
	volume	&#x3D;	42,
	number	&#x3D;	5,
	month	&#x3D;	aug,
	year	&#x3D;	2023,
	pages	&#x3D;	&#123;Article e14908, 13 pages&#125;,
	note	&#x3D;	&#123;Proceedings of SGP&#125;
&#125; </code></pre>
]]></content>
      <categories>
        <category>几何处理</category>
      </categories>
      <tags>
        <tag>MATLAB代码</tag>
        <tag>算法实现</tag>
        <tag>极大似然坐标</tag>
      </tags>
  </entry>
  <entry>
    <title>从复平面上域的多项式函数生成调和函数</title>
    <url>/post/harmonic.html</url>
    <content><![CDATA[<p>调和函数是在某区域中满足拉普拉斯方程的函数。由于任意全纯函数的实部和虚部都满足二元调和函数。所有关于复数<span
class="math inline">\(z=x+yi\)</span>的多项式函数<span
class="math inline">\(p_n(z)=a_0+a_1z+\dots+a_nz^n\)</span>在复数域上是全纯的。则<span
class="math inline">\(p_n(z)\)</span>的实部（虚部）是关于<span
class="math inline">\((x,y)\)</span>的二元调和函数。</p>
<p>这里我们用Matlab可视化 <pre class="language-MATLAB" data-language="MATLAB"><code class="language-MATLAB">clear
close all
[x,y] &#x3D; meshgrid(linspace(-1,1,100));
p &#x3D; @(x,y) complex(x,y).^2-complex(x,y)&#x2F;2;
z &#x3D; real(p(x,y));
surf(x,y,z,&#39;linestyle&#39;,&#39;none&#39;);
axis off;</code></pre></p>
<p><img src="http://img.ifish.ink/figure/har.gif" /></p>
]]></content>
      <categories>
        <category>曲线曲面</category>
      </categories>
      <tags>
        <tag>MATLAB代码</tag>
        <tag>调和函数</tag>
        <tag>极小曲面</tag>
      </tags>
  </entry>
  <entry>
    <title>标准雅可比迭代算法-实现</title>
    <url>/post/5d0495ae.html</url>
    <content><![CDATA[<h3
id="标准雅可比迭代算法解线性方程组-算法实现">标准雅可比迭代算法解线性方程组-算法实现</h3>
<span id="more"></span>
<ul>
<li>函数实现</li>
</ul>
<pre class="language-MATLAB" data-language="MATLAB"><code class="language-MATLAB">function [ output_args ] &#x3D; cqj_Jacobi(init_X,coefficient_mat,b_mat,maxNum,epsilon)
% 雅可比迭代法
% init_X：初始值
% coefficient_mat：系数矩阵
% b_mat：b
% maxNum：最大迭代次数
% epsilon：精度
output_args &#x3D; [];
flag &#x3D; 0;
%% 预处理 检查用户调用函数时参数格式是否传错
if size(coefficient_mat,1) ~&#x3D; size(coefficient_mat,2)
    disp(&#39;系数矩阵格式错误(需要方阵)&#39;);
    return;
end
if size(b_mat,1) ~&#x3D; 1 &amp;&amp; size(b_mat,2) ~&#x3D; 1
    disp(&#39;AX&#x3D;b中的b必须为行向量或者列向量&#39;);
    return;
end
if size(b_mat,1) &#x3D;&#x3D; 1
    b_mat &#x3D; b_mat&#39;;
end
if size(init_X,1) ~&#x3D; 1 &amp;&amp; size(init_X,2) ~&#x3D; 1
    disp(&#39;初始值必须为行向量或者列向量&#39;);
    return;
end
if size(init_X,1) &#x3D;&#x3D; 1
    init_X &#x3D; init_X&#39;;
end
if size(init_X,1) ~&#x3D; size(coefficient_mat,1)
    disp(&#39;初始值与系数矩阵维数不一致&#39;);
    return;
end
if size(init_X,1) ~&#x3D; size(b_mat,1)
    disp(&#39;AX&#x3D;b中的b向量维数错误(需与系数矩阵的维数一致&#39;);
    return;
end
if ~exist(&#39;maxNum&#39;, &#39;var&#39;)
    maxNum &#x3D; 500; % 默认值
end
if ~exist(&#39;epsilon&#39;, &#39;var&#39;)
    epsilon &#x3D; 1e-14; % 默认值
end
%% 对角线
D &#x3D; diag(diag(coefficient_mat));
% 可能matlab的源码inv函数对角函数求逆会像普通函数一样处理，
% 这种特殊函数求逆会比较快
D_inv &#x3D; diag(1.&#x2F;diag(coefficient_mat));
%% 开始迭代
% 下面代码段也行 但是对内存的消耗比较大 
% x(:,0) &#x3D; init_X;
% for k &#x3D; 1:maxNum
%     x(:,k) &#x3D; D_inv*(b_mat-(coefficient_mat-D)*x(:,k-1));
%     if norm(x(:,k)-x(:,k-1)) &lt; epsilon  % 达到精度
%         flag &#x3D; 1;
%         break;
%     end
% end
x &#x3D; init_X;
%%
% 迭代公式：
% $$x_&#123;k+1&#125;&#x3D;D^&#123;-1&#125;(b-(L+U)x_k),k&#x3D;0,1,2,\cdots$
% 
for k &#x3D; 1:maxNum
    temp &#x3D; D_inv*(b_mat-(coefficient_mat-D)*x);
    if norm(temp-x) &lt; epsilon
        flag &#x3D; 1;
        x &#x3D; temp;
        break;
    end
    x &#x3D; temp;
end
%% 结果
text(0,0.95,&#39;方程：&#39;,&#39;Color&#39;,&#39;red&#39;,&#39;FontSize&#39;,14);
str1 &#x3D; &#39;\left[\begin&#123;array&#125;&#39;;
% 正则表达式
str2 &#x3D; @(X) regexprep(regexprep(mat2str(zeros(1,size(X,2))),...
    &#39;[\s\[\]]&#39;,&#39;&#39;),&#39;0&#39;,&#39;c&#39;); 
mat_start &#x3D; @(X) [str1 &#39;&#123;&#39; str2(X) &#39;&#125;&#39;];
my_mat2str &#x3D; @(mat) regexprep(regexprep(regexprep(mat2str(mat),...
    &#39; *&#39;,&#39;&amp;&#39;),&#39;;&#39;,&#39;\\\&#39;),&#39;[\[\]]&#39;,&#39;&#39;);
mat_end &#x3D; &#39;\end&#123;array&#125;\right]&#39;;
str5 &#x3D; &#39;\times X&#x3D;&#39;;
% LaTex 输出
text(&#39;Interpreter&#39;,&#39;latex&#39;, &#39;String&#39;,[&#39;$$&#39;...
    mat_start(coefficient_mat),my_mat2str(coefficient_mat),mat_end,...
    str5,mat_start(b_mat),my_mat2str(b_mat),mat_end &#39;$$&#39;],...
    &#39;Position&#39;,[0.1 0.7],&#39;FontSize&#39;,10);
text(0,0.5,&#39;标准雅可比迭代结果：&#39;,&#39;Color&#39;,&#39;red&#39;,&#39;FontSize&#39;,14);
if flag &#x3D;&#x3D; 1  %好的结果
    output_args.itrNum &#x3D; k;
    output_args.result &#x3D; x;
    fprintf(&#39;迭代次数：%d\n&#39;,output_args.itrNum);
%     disp(x(:,k));
    disp(&#39;解：&#39;);
    disp(x);
    text(&#39;Interpreter&#39;,&#39;latex&#39;, &#39;String&#39;,[&#39;$$X^*&#x3D;&#39; ...
        mat_start(x) my_mat2str(x) mat_end &#39;$$&#39;],...
        &#39;Position&#39;,[0.1 0.3],&#39;FontSize&#39;,10);
    text(0.1,0.1,[&#39;迭代次数：&#39; num2str(output_args.itrNum)],...
    &#39;Color&#39;,&#39;k&#39;,&#39;FontSize&#39;,10);
    return;
end
text(0.1,0.3,[&#39;迭代&#39; num2str(maxNum) &#39;次后未收敛&#39;],...
    &#39;Color&#39;,&#39;k&#39;,&#39;FontSize&#39;,10);
fprintf(&#39;迭代%d次后暂未收敛\n&#39;,maxNum);
end</code></pre>
<ul>
<li>测试代码</li>
</ul>
<pre class="language-MATLAB" data-language="MATLAB"><code class="language-MATLAB">xishu_mat &#x3D; [20 8 -5 -5;7 9 -2 -10;-5 -1 9 -1;-7 1 -9 10];
b_mat &#x3D; [-1 -5 2 -1];
init_X &#x3D; zeros(size(b_mat));
out_Jacobi &#x3D; cqj_Jacobi(init_X,xishu_mat,b_mat,1000);</code></pre>
<ul>
<li>文档 <a
href="https://img.ifish.ink/Standard_Jacobian_Iterative_Algorithm_Procedure.pdf">文档原文</a></li>
</ul>
<hr />
<p><strong>如有任何疑问或建议欢迎下方留言 :-)</strong></p>
]]></content>
      <categories>
        <category>代数</category>
      </categories>
      <tags>
        <tag>MATLAB代码</tag>
        <tag>算法实现</tag>
      </tags>
  </entry>
  <entry>
    <title>简单细分曲线</title>
    <url>/post/subdivcurve.html</url>
    <content><![CDATA[<h3 id="细分曲线">细分曲线</h3>
<p>对于给定<span
class="math inline">\(\mathbb{R}^2\)</span>内一组有序点<span
class="math inline">\(\{\mathbf{Q}_i\}_{i=0}^n\)</span>，构成简单多边形，找到一条与之关联的光滑曲线。</p>
<h4
id="chaikin细分曲线二次b-spline曲线细分">Chaikin细分曲线（二次B-spline曲线细分）</h4>
<p>拓扑规则：</p>
<ul>
<li>点分裂成边（割角），老点被抛弃（逼近型）</li>
<li>新点老点重新编号</li>
</ul>
<p>几何规则：</p>
<ul>
<li><span
class="math inline">\(\mathbf{Q}&#39;_{2i}=\frac{1}{4}\mathbf{Q}_{i-1}+\frac{3}{4}\mathbf{Q}_i\)</span></li>
<li><span
class="math inline">\(\mathbf{Q}&#39;_{2i+1}=\frac{3}{4}\mathbf{Q}_i+\frac{1}{4}\mathbf{Q}_{i+1}\)</span></li>
</ul>
<p>下图展示了经过5次Chaikin细分得到的细分曲线： <img
src="/images/imgs/1224_1.png"
alt="Chaikin细分曲线（左：不封闭；右：封闭）" /></p>
<h4 id="三次b-spline曲线细分">三次B-spline曲线细分</h4>
<p>拓扑规则：</p>
<ul>
<li>边分裂成两条新边</li>
</ul>
<p>几何规则：</p>
<ul>
<li><span
class="math inline">\(\mathbf{Q}&#39;_{2i}=\frac{1}{8}\mathbf{Q}_{i-1}+\frac{3}{4}\mathbf{Q}_i+\frac{1}{8}\mathbf{Q}_{i+1}\)</span></li>
<li><span
class="math inline">\(\mathbf{Q}&#39;_{2i+1}=\frac{1}{2}\mathbf{Q}_i+\frac{1}{2}\mathbf{Q}_{i+1}\)</span></li>
</ul>
<p>下图展示了重复5次的“三次B样条”曲线细分得到的细分曲线： <img
src="/images/imgs/1224_2.png"
alt="三次B样条细分曲线（左：不封闭；右：封闭）" /></p>
<h4 id="四点插值型细分补角">四点插值型细分（补角）</h4>
<p>拓扑规则：</p>
<ul>
<li>保留原有顶点</li>
<li>对每条边，增加一个新顶点</li>
</ul>
<p>几何规则：</p>
<ul>
<li><span
class="math inline">\(\mathbf{Q}&#39;_{2i+1}=\frac{\mathbf{Q}_i+\mathbf{Q}_{i+1}}{2}+\alpha\left(\frac{\mathbf{Q}_i+\mathbf{Q}_{i+1}}{2}-\frac{\mathbf{Q}_{i-1}+\mathbf{Q}_{i+2}}{2}\right)\)</span></li>
</ul>
<p>下图展示了重复5次的四点插值细分得到的细分曲线： <img
src="/images/imgs/1224_3.png"
alt="封闭控制多边形的四点插值细分曲线" /></p>
<h3 id="主要代码">主要代码</h3>
<ul>
<li><p>Chaikin细分：</p>
<p><pre class="language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>Ubpa<span class="token double-colon punctuation">::</span>pointf2<span class="token operator">></span> <span class="token function">Chaikin_subdivision</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>Ubpa<span class="token double-colon punctuation">::</span>pointf2 <span class="token operator">></span><span class="token operator">*</span> p<span class="token punctuation">,</span> <span class="token keyword">bool</span> close<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>Ubpa<span class="token double-colon punctuation">::</span>pointf2<span class="token operator">></span> newP<span class="token punctuation">;</span>
    newP<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> n<span class="token operator">=</span>p<span class="token operator">-></span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>close<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>p<span class="token operator">-></span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            newP<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>p<span class="token operator">-></span><span class="token function">at</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token operator">+</span>n<span class="token punctuation">)</span><span class="token operator">%</span>n<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">0.25f</span><span class="token operator">+</span>p<span class="token operator">-></span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">0.75f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            newP<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>p<span class="token operator">-></span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">0.75f</span><span class="token operator">+</span>p<span class="token operator">-></span><span class="token function">at</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>n<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">0.25f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>close<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        newP<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>p<span class="token operator">-></span><span class="token function">at</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">0.75f</span><span class="token operator">+</span>p<span class="token operator">-></span><span class="token function">at</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">0.25f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>p<span class="token operator">-></span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            newP<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>p<span class="token operator">-></span><span class="token function">at</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token operator">+</span>n<span class="token punctuation">)</span><span class="token operator">%</span>n<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">0.25f</span><span class="token operator">+</span>p<span class="token operator">-></span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">0.75f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            newP<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>p<span class="token operator">-></span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">0.75f</span><span class="token operator">+</span>p<span class="token operator">-></span><span class="token function">at</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>n<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">0.25f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        newP<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>p<span class="token operator">-></span><span class="token function">at</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">%</span>n<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">0.25f</span><span class="token operator">+</span>p<span class="token operator">-></span><span class="token function">at</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">0.75f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> newP<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre></p></li>
<li><p>三次B样条细分曲线</p>
<p><pre class="language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>Ubpa<span class="token double-colon punctuation">::</span>pointf2<span class="token operator">></span> <span class="token function">cubic_subdivision</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>vector <span class="token operator">&lt;</span>Ubpa<span class="token double-colon punctuation">::</span>pointf2 <span class="token operator">></span><span class="token operator">*</span> p<span class="token punctuation">,</span> <span class="token keyword">bool</span> close<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>Ubpa<span class="token double-colon punctuation">::</span>pointf2<span class="token operator">></span> newP<span class="token punctuation">;</span> newP<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> n<span class="token operator">=</span>p<span class="token operator">-></span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>close<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>p<span class="token operator">-></span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
            newP<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>p<span class="token operator">-></span><span class="token function">at</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token operator">+</span>n<span class="token punctuation">)</span><span class="token operator">%</span>n<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">0.125f</span><span class="token operator">+</span>p<span class="token operator">-></span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">0.75f</span><span class="token operator">+</span>p<span class="token operator">-></span><span class="token function">at</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>n<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">0.125f</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
            newP<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>p<span class="token operator">-></span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">0.5f</span><span class="token operator">+</span>p<span class="token operator">-></span><span class="token function">at</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>n<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">0.5f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>close<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        newP<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>p<span class="token operator">-></span><span class="token function">at</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">0.5f</span><span class="token operator">+</span>p<span class="token operator">-></span><span class="token function">at</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">0.5f</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>p<span class="token operator">-></span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            newP<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>p<span class="token operator">-></span><span class="token function">at</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token operator">+</span>n<span class="token punctuation">)</span><span class="token operator">%</span>n<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">0.125f</span><span class="token operator">+</span>p<span class="token operator">-></span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">0.75f</span> <span class="token operator">+</span>p<span class="token operator">-></span><span class="token function">at</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>n<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">0.125f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            newP<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>p<span class="token operator">-></span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">0.5f</span><span class="token operator">+</span>p<span class="token operator">-></span><span class="token function">at</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>n<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">0.5f</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> newP<span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span></code></pre></p></li>
<li><p>四点插值型细分曲线</p>
<p><pre class="language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>Ubpa<span class="token double-colon punctuation">::</span>pointf2<span class="token operator">></span> <span class="token function">quad_subdivision</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>vector <span class="token operator">&lt;</span>Ubpa<span class="token double-colon punctuation">::</span>pointf2<span class="token operator">></span><span class="token operator">*</span> p<span class="token punctuation">,</span> <span class="token keyword">bool</span> close<span class="token punctuation">,</span> <span class="token keyword">float</span> alpha<span class="token operator">=</span><span class="token number">0.075</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>Ubpa<span class="token double-colon punctuation">::</span>pointf2<span class="token operator">></span> newP<span class="token punctuation">;</span> newP<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> n<span class="token operator">=</span>p<span class="token operator">-></span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>close<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>p<span class="token operator">-></span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
            newP<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>p<span class="token operator">-></span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
            newP<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">(</span>p<span class="token operator">-></span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">+</span>p<span class="token operator">-></span><span class="token function">at</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2.0f</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">(</span>p<span class="token operator">-></span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">+</span>p<span class="token operator">-></span><span class="token function">at</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2.0f</span><span class="token operator">-</span><span class="token punctuation">(</span>p<span class="token operator">-></span><span class="token function">at</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token operator">+</span>n<span class="token punctuation">)</span><span class="token operator">%</span>n<span class="token punctuation">)</span><span class="token operator">+</span>p<span class="token operator">-></span><span class="token function">at</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">%</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2.0f</span><span class="token punctuation">)</span><span class="token operator">*</span>alpha<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> 
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>close<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>p<span class="token operator">-></span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            newP<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>p<span class="token operator">-></span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
            newP<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">(</span>p<span class="token operator">-></span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">+</span>p<span class="token operator">-></span><span class="token function">at</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2.0f</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">(</span>p<span class="token operator">-></span><span class="token function">at</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">+</span>p<span class="token operator">-></span><span class="token function">at</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2.0f</span><span class="token operator">-</span><span class="token punctuation">(</span>p<span class="token operator">-></span><span class="token function">at</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token operator">+</span>n<span class="token punctuation">)</span><span class="token operator">%</span>n<span class="token punctuation">)</span><span class="token operator">+</span>p<span class="token operator">-></span><span class="token function">at</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">%</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2.0f</span><span class="token punctuation">)</span><span class="token operator">*</span>alpha<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> 
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> newP<span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span></code></pre></p></li>
</ul>
]]></content>
      <categories>
        <category>曲线曲面</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
        <tag>细分曲线</tag>
      </tags>
  </entry>
  <entry>
    <title>瑞士意大利语区大学访学记录</title>
    <url>/post/f29efa2.html</url>
    <content><![CDATA[<blockquote>
<p>瑞士位于欧洲中部，与德国、意大利、法国接壤，属于内陆国。瑞士是全球最富裕、经济最发达的国家之一。瑞士人民拥有较高的生活水准。瑞士旅游资源丰富，有世界公园的美誉。
第一次写这种游记，主要是想介绍一下我此次欧洲之行的感受。</p>
</blockquote>
<figure>
<img src="http://img.ifish.ink/img/Switzerland.jpg" alt="瑞士" />
<figcaption aria-hidden="true">瑞士</figcaption>
</figure>
<span id="more"></span>
<hr />
<h3 id="访学契机">访学契机</h3>
<p>我是来自杭州电子科技大学的硕士研究生，在2019年夏季，我有幸受到Kai
Hormann教授的邀请去往瑞士意大利语区大学交流。由于在2018年我与Kai
Hormann在杭州有过一次短暂的相处，所以少了一些陌生。访问交流的时间定在2019年9月中旬至2019年12月中旬。</p>
<hr />
<h3 id="签证篇">签证篇</h3>
<p>在确定好了访问时间后，已经是7月下旬了，由于时间非常紧迫，所以马上着手准备办理签证所需的各种材料。我的目的地是瑞士，瑞士不属于欧盟成员国，但是属于申根签证国，我办理的是C类短期申根签证。所需的材料如下：</p>
<p>学校所需材料</p>
<ul>
<li>国外院校邀请函</li>
<li>访学申请表</li>
<li>家长担保函 （需公证）</li>
</ul>
<p>签证所需材料</p>
<ul>
<li>申根签证申请表 （原件）</li>
<li>护照原件及复印件</li>
<li>照片 （尺寸颜色要求需到签证中心官网查看）</li>
<li>医疗保险</li>
<li>邀请函 （原件 + 翻译件）</li>
<li>解释信</li>
<li>外交部认证的亲属关系公证书</li>
<li>经济依附人银行3个月流水记录</li>
<li>学校出具在读证明 （原件 + 翻译件）</li>
</ul>
<p>因为 <strong>外交部认证的亲属关系公证书</strong>
办理的路子有点麻烦，我在某宝找了代理帮办，其他我都是自己办理的，当我把所有材料都准备好的时候已经8月底了，之前在网上查询了一下都说签证基本上需要15个工作日左右，由于我提前买好了9月14日出发的机票，所以时间还是很紧迫的，结果瑞士驻上海领事馆的办事效率还是非常不错的，我周五去递签的，没想到周二就收到签证了。
<img src="http://img.ifish.ink/img/visa.png" alt="签证" /></p>
<hr />
<h3 id="行程篇">行程篇</h3>
<p>接来下便是准备行李等方面的事情了……</p>
<ul>
<li>由于是国际长途，航班对行李的携带有着严格的规定。常见物品托运规定可参考下图：
<img src="http://img.ifish.ink/img/tuoyun.jpg" alt="托运指南" /></li>
<li>如果是短途旅行可以提前在网上购买一张旅行用的手机卡，主要是使用4G上网功能。在某宝上可以找到一大堆这样的卡，根据自己需要，这里就不介绍了，需要注意的是购买一定要看清楚此卡在目的国家是否可用。价格方面可以参照下图：
<img src="http://img.ifish.ink/img/sim.png" alt="手机卡购买" /></li>
</ul>
<h4 id="出发-go">出发 Go:</h4>
<p>由于瑞士意大利语区大学在瑞士南部提挈诺州(Ticino)的卢加诺(Lugano)小城，我的行程路线是：杭州→上海→法兰克福→苏黎世→卢加诺。在一切准备就绪后，我于北京时间2019年9月14日登上了从上海浦东机场飞往德国法兰克福机场的航班，开启了长达十几个小时的空中之旅。
<img src="http://img.ifish.ink/img/shangtofa.jpg" alt="机票" /> <img
src="http://img.ifish.ink/img/fatosu.jpg" alt="机票" />
大型波音客机体验非常确实不错，客机系统能让我随时了解到我当前处于什么位置。
当地时间次日早晨抵达法兰克福机场后，由于中转时间短，没有多余的时间和精力记录法兰克福国际机场的场景，紧张的换乘让人特别疲惫。
<img src="http://img.ifish.ink/img/fa_airport.jpg" alt="法兰克福机场" />
搭乘从德国法兰克福到瑞士苏黎世的航班，上午准时降落在苏黎世国际机场，然后乘坐号称全球准点率最高的瑞铁（SBB）前往终点卢加诺Lugano.
<img src="http://img.ifish.ink/img/lugano1.jpg" alt="卢加诺火车站外" />
当我到达卢加诺火车站时，Kai
Hormann教授带我去往他的家里，并同他的家人们共享西式午餐（P.S.
感觉教授非常热心肠，非常好，异国他乡真的超感动） <img
src="http://img.ifish.ink/img/home_kai.jpg" alt="教授家" /></p>
<hr />
<h3 id="学习篇">学习篇</h3>
<blockquote>
<p>接下来便是三个月的异国生活，当然我的主要任务是为学习来的，所以还是要以学习为主，哈哈。学习之余便是旅游了……</p>
</blockquote>
<p>瑞士意大利语区大学位于瑞士南部提挈诺州，是瑞士十二所公立大学之一，也是瑞士意大利语区唯一的一所公立大学。
瑞士意大利语区大学主要以意大利语和英语交流为主，在学校校园及实验室跟老师同学沟通都是英语，所以可以很好地锻炼口语表达能力。由于卢加诺属于意大利语区，官方语言为意大利语，市民之间的交流以及公共设施多以意大利语为主，这一点对我来说有点不太方便。
<img src="http://img.ifish.ink/img/usi_lib.jpg" alt="USI图书馆" />
我本次到达卢加诺的目的是在Kai
Hormann教授的指导下进行广义重心坐标相关的研究工作。在Hormann教授的指导下，我学习到了许多新的工作模式和工作技能。同时，Hormann教授也鼓励我趁这次访学的机会，在周末多出去逛逛，感受欧洲风情。与我一同相处的是三个研究计算几何的博士学生：Dr.
Martin Suderland(德国), Dr. Kolja Junginger(德国)与Dr. Ioannis
Mantas(希腊)，我们平时相处非常融洽，在平时的相处中我们讨论中西方文化差异，向他们讲述中国的传统文化，以及近几年的发展情况。在平常的学习之余，我们会聚餐放松，开车到瑞士的山中去感受当地特色食物，享受生活。(下图食物人均35CHF也是非常贵了:sweat_smile:)
<img src="http://img.ifish.ink/img/food.png" alt="特色食物" />
在学习研究方面，我与Kai每周会针对我们的研究问题进行3-4次大的讨论，我们一起优化每一行代码，这种工作模式与国内师生的工作方式大不相同，让我印象深刻，我也很喜欢这样的工作模式。Kai指导我使用OpenGL库进行GPU编程，在他的指导下我熟悉了OpenGL渲染语言GLSL。
<img src="http://img.ifish.ink/img/work1.jpg" alt="讨论" /> <img
src="http://img.ifish.ink/img/work2.jpg" alt="讨论" /> <img
src="http://img.ifish.ink/img/work-ic.png" alt="成果" /></p>
<blockquote>
<p>很幸运我们的研究成果"<a
href="https://www.sciencedirect.com/science/article/abs/pii/S0167839620300480">Iterative
Coordinates</a>"被国际会议"The 14th International Conference on
Geometric Modeling and Processing GMP 2020"录用，已被推荐至期刊 Computer
Aided Geometric Design 出版。</p>
</blockquote>
<hr />
<h3 id="卢塞恩-luzern">卢塞恩 Luzern</h3>
<p><img src="http://img.ifish.ink/img/Luzern.jpg" />
瑞士卢塞恩(琉森)最负盛名便是卡佩尔廊桥Chapel
Bridge（Kapellbrücke）又叫教堂桥，这是卢塞恩的标志，始建于1333年，也是欧洲最古老的有顶木桥，桥的横眉上绘有120幅宗教历史油画，沿途还可欣赏描述当年黑死病流行景象的画作。<a
href="https://baike.baidu.com/item/%E5%8D%A1%E4%BD%A9%E5%B0%94%E6%A1%A5/9494568?fromtitle=%E5%8D%A1%E8%B4%9D%E5%B0%94%E6%A1%A5&amp;fromid=1847616"
title="卡佩尔桥">[1]</a> <img
src="http://img.ifish.ink/img/Luzern1.jpg" />
卢塞恩地标建筑卡佩尔桥湖两岸非常多的餐厅，是瑞士难得一见比较热闹的地方。我到卢塞恩的时候赶上了好天气，中午湖里有人“赛龙舟”，在湖边的欧式餐厅很悠闲的吃吃饭，然后在岸边的石台阶上坐着欣赏“赛龙舟”，还时不时有喇叭里传出的欧洲音乐，非常惬意。(下图食物总价85CHF+5CHF小费:sweat_smile:)
<img src="http://img.ifish.ink/img/Luzern_food.jpg" /></p>
<hr />
<h3 id="阿尔卑斯山脉美丽的少女峰-jungfrau-alps">阿尔卑斯山脉美丽的少女峰
Jungfrau Alps</h3>
<p><img src="http://img.ifish.ink/img/apls_quanjing.jpg" />
由于之前看过一部非常喜欢的治愈系电影：<a
href="https://movie.douban.com/subject/25958717/"
title="海蒂和爷爷 Heidi">海蒂和爷爷 Heidi</a>
特别喜欢电影中的画面，后来了解电影拍摄地有瑞士阿尔卑斯山脉。
<strong>安利一下:</strong>
9月底，我来到了阿尔卑斯山脉著名的少女峰，少女峰一直以冰雪与山峰、阳光与浮云吸引着八方游客。我乘坐齿轨火车到达少女峰火车站，少女峰齿轨火车，又叫云霄火车，因为它最终抵达的地方位居海拔3454米的少女峰站是全欧洲海拔最高的火车站，有“Top
op Europe欧洲之巅”之称。关于少女峰齿轨铁路的建设可从<a
href="https://www.jungfrau.ch/zh-cn/jungfraujoch-top-of-europe/%E5%B0%91%E5%A5%B3%E5%B3%B0%E9%93%81%E8%B7%AF%E5%BB%BA%E8%AE%BE/">这里</a>获得更多信息。
<img src="http://img.ifish.ink/img/chigui_pass.jpg" /> <img
src="http://img.ifish.ink/img/jing.jpg" /> <img
src="http://img.ifish.ink/img/jing1.jpg" /> <img
src="http://img.ifish.ink/img/aerbeisishaonvfeng.jpg" /></p>
<hr />
<h3 id="米兰milano">米兰Milano</h3>
<p><img src="http://img.ifish.ink/img/duomo.jpg" alt="米兰大教堂" />
以前对于米兰的认识基本都是很肤浅的认识，仅仅从一些词条有所了解，比如：国际米兰队、AC米兰、米兰时装秀等。但是当我亲历这座国际知名的城市后，发现米兰的确有它的文化底蕴，历史悠久，1805年拿破仑加冕仪式就在上图的米兰大教堂举行。
<img src="http://img.ifish.ink/img/milano_npl.jpg" alt="雕塑" />
米兰主教大教堂(Duomo &amp; Piazza del
Duomo)于1386年开工建造，1500年完成拱顶，1774年最高的哥特式塔尖上的La
Madonnina(镀金圣母玛丽亚雕像)由Giuseppe
Perego建造，是米兰市的象征。整个教堂1965年完工，历时五个世纪。雄伟壮观的哥德式建筑，为世界第二大教堂，世界上最大的哥特式建筑。纷繁复杂的塔尖，独特华丽的设计，正是米兰时尚精神的源泉。这座教堂曾举行过拿破仑的加冕礼，也让达芬奇为其苦思冥想，拥有者无比的力量。更有甚者，为了这座教堂，达芬奇还发明了电梯。如今，这座教堂已经不仅仅是宗教精神的象徵，更是时尚的象徵，独特的象徵，意大利的象徵。<a
href="https://baike.baidu.com/item/%E7%B1%B3%E5%85%B0/21047"
title="百度百科-米兰大教堂">[2]</a> 下图是斯福尔扎城堡。<a
href="https://baike.baidu.com/item/%E6%96%AF%E7%A6%8F%E5%B0%94%E6%89%8E%E5%9F%8E%E5%A0%A1"
title="斯福尔扎城堡">[3]</a> <img
src="http://img.ifish.ink/img/milano_chengbao.jpg" alt="城堡" /> <img
src="http://img.ifish.ink/img/milano.jpg" alt="米兰" />
由于米兰距离Lugano比较近，交通便利且便宜，所以去的次数就多一点。</p>
<hr />
<h3 id="代尔夫特鹿特丹">代尔夫特、鹿特丹</h3>
<p><img src="http://img.ifish.ink/img/nl6.jpg" />
鹿特丹（Rotterdam）是荷兰第二大城市，包括郊区人口共102万。位于荷兰的南荷兰省，Nieuwe
Maas河畔。 鹿特丹的名字来自于在市中心注入Nieuwe
Maas河的小河鹿特河和荷兰词Dam（坝）。鹿特丹长期为欧洲最大的海港，以集装箱运量计算，19世纪80年代曾是世界上第一大港口，在2010年为世界第10。<a
href="https://baike.baidu.com/item/%E9%B9%BF%E7%89%B9%E4%B8%B9"
title="鹿特丹">[4]</a> <img src="http://img.ifish.ink/img/nl.jpg" />
代尔夫特
（荷兰语：Delft）是荷兰南荷兰省的一个城市，地处海牙和鹿特丹之间。面积
24.08Km2，人口94577（至2006年6月1日)。由于拥有荷兰高等学府代尔夫特理工大学(Delft
University of Technology)和国际水利环境工程学院IHE(International
Institute for Infrastructural ,Hydraulic and Environmental
Engineering)，代尔夫特也被称为知识之城。除代尔夫特外，
该城市亦被翻译做"黛芙朵"或"台夫特"。<a
href="https://baike.baidu.com/item/%E4%BB%A3%E5%B0%94%E5%A4%AB%E7%89%B9"
title="代尔夫特">[5]</a> 代尔夫特拥有非常出名的“代尔夫特蓝瓷” <img
src="http://img.ifish.ink/img/lanci.jpg" />
从阿姆斯特丹机场到鹿特丹乘坐火车大约40分钟即可到达代尔夫特，由于时间关系没能在阿姆斯特丹参观，不过参观了鹿特丹以及代尔夫特的一些地方，也算是非常不错的体验了。欧洲随处可见的教堂，教堂一般都算是当地比较壮观的建筑了。
代尔夫特像是一个缩小版的阿姆斯特丹，内城中遍布着水道和小桥，却比阿姆斯特丹更加宁静、复古，这里的桥采用了一种动态的设计方式以便于船只和车辆相融通行。另外南荷兰给我的印象是很多骑自行车的人。<br />
<img src="http://img.ifish.ink/img/dtu.jpg" /></p>
<hr />
<h3 id="罗马">罗马</h3>
<p><img src="http://img.ifish.ink/img/roma1.jpg" /> <img
src="http://img.ifish.ink/img/roma2.jpg" /> <img
src="http://img.ifish.ink/img/roma3.jpg" /></p>
<hr />
<h3 id="苏黎世">苏黎世</h3>
<p><img src="http://img.ifish.ink/img/Zurich1.jpg" /> <img
src="http://img.ifish.ink/img/Zurich2.jpg" /> <img
src="http://img.ifish.ink/img/Zurich3.jpg" /> <img
src="http://img.ifish.ink/img/Zurich4.jpg" /></p>
<hr />
<h3 id="总结">总结</h3>
<p>在这里我能感受到更加多的开放和包容，这里的师生来自全球各个地区，各种文化与习惯的交融让这里多了一份尊重和包容。
这趟欧洲之行给我最大的收获是变得更加独立。在一个完全陌生的环境生活几个月，让我遇事多了一些从容淡定，的确成长了许多。
最后，感谢Kai
Hormann教授的邀请和邓重阳教授的支持让我有了这次国外学习的机会，感谢杭州电子科技大学为我提供出国经费方面的资助，此次荷兰之行，要特别感谢我的中学同学-代尔夫特理工大学张羽博士的邀请。</p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>游记</tag>
        <tag>生活</tag>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>爱奇艺非会员去视频广告：uBlock Origin插件</title>
    <url>/post/6248da0d.html</url>
    <content><![CDATA[<blockquote>
<p>相信大家在浏览网页时，都有被各种各样的站内广告所打扰的经历。今天小编给大家分享一款评分很高的去广告插件
uBlock Origin</p>
</blockquote>
<h3
id="小编使用ublock-origin插件已经一年多时间了在这之前用过各种各样的去广告插件但唯独这一款插件用得最舒服也是使用时间最长的一款去广告插件">小编使用uBlock
Origin插件已经一年多时间了，在这之前用过各种各样的去广告插件，但唯独这一款插件用得最舒服，也是使用时间最长的一款去广告插件</h3>
<span id="more"></span>
<h3 id="一ublock-origin简介">一、uBlock Origin简介</h3>
<p><img src="http://img.ifish.ink/img/uo.png"
alt="uBlock Origin Logo" /> uBlock
Origin是一款自由、开源、跨平台的内容过滤浏览器扩展，包含广告屏蔽功能。此扩展可在多款浏览器上使用，包括Safari、Chrome、Edge、Firefox和Opera及相关的兼容浏览器。<a
href="https://zh.wikipedia.org/wiki/UBlock_Origin"
title="https://zh.wikipedia.org/wiki/UBlock_Origin">[1]</a> uBlock
Origin已获得多家技术网站的赞誉，其内存占用比其他同样功能的扩展更少。uBlock
Origin的目标是为用户提供自行实施内容过滤的选择。<a
href="https://zh.wikipedia.org/wiki/UBlock_Origin"
title="https://zh.wikipedia.org/wiki/UBlock_Origin">[1]</a>
截至2016年，uBlock Origin继续由其创始人和主要开发者Raymond
Hill积极开发和维护。Hill已撤出对该软件的旧分支“uBlock”的支持，援引“严重违背本项目的精神”。从外表看，旧的分支也已不再被维护。<a
href="https://zh.wikipedia.org/wiki/UBlock_Origin"
title="https://zh.wikipedia.org/wiki/UBlock_Origin">[1]</a></p>
<hr />
<h3 id="二chrome下安装ublock-origin插件">二、Chrome下安装uBlock
Origin插件</h3>
<p><em>小编仅仅在Chrome下测试过，其他浏览器下未测试</em></p>
<h4 id="直接从google-store安装插件">直接从Google Store安装插件</h4>
<blockquote>
<p>（由于一些众所周知的原因，国内用户可能不能直接使用google服务，所以不能访问google
store的同学请跳过本节，用下面讲的第二种方法“<strong>从本地导入.crx文件</strong>”）</p>
</blockquote>
<ol type="1">
<li><a
href="https://chrome.google.com/webstore/detail/ublock-origin/cjpalhdlnbpafiamejdnhcphjbkeiagm?hl=zh-CN">点击</a>进入Chrome网上应用商店，点击右侧“<strong>添加至Chrome</strong>”，选择“<strong>添加扩展程序</strong>”
<img src="http://img.ifish.ink/img/uo5.png" /> <img
src="http://img.ifish.ink/img/uo2.png" /></li>
</ol>
<h4 id="从本地导入.crx文件">从本地导入.crx文件</h4>
<ol type="1">
<li><p>从百度云盘<a
href="https://pan.baidu.com/s/1kqHWjTgz2bY8WD00uniqWQ">下载</a> uBlock
Origin 1.19.6_0.crx文件 提取码：tqwe</p></li>
<li><p>进入Chrome的扩展程序页：在Chrome地址栏中键入<a
href="chrome://extensions/">chrome://extensions/</a>
后回车，可以看到类似下图页面 <img src="http://img.ifish.ink/img/1.png"
alt="chrome://extensions" /></p></li>
<li><p>将第1步中下载的<a
href="https://pan.baidu.com/s/1kqHWjTgz2bY8WD00uniqWQ">uBlockOrigin1.19.6_0.crx</a>文件拖动到<a
href="chrome://extensions/">Chrome扩展页</a>，点击“<strong>添加扩展程序</strong>”即可
<img src="http://img.ifish.ink/img/uo2.png" /> <img
src="http://img.ifish.ink/img/uo3.png" /></p></li>
<li><p>在Chrome右上角点击uBlock
Origin的图标，选择启动插件，大功告成。可以根据自己的需要设置一些广告拦截规则。
<img src="http://img.ifish.ink/img/uo4.png" /></p></li>
</ol>
<hr />
<h3 id="三测试">三、测试</h3>
<ul>
<li><p>未启用uBlock
Origin插件时，用<strong>百度</strong>搜索引擎搜索关键词“前端开发”的页面
(可以看到靠前的内容几乎都是广告) <img
src="http://img.ifish.ink/img/uo6.png" /></p></li>
<li><p>启用uBlock
Origin插件后，用<strong>百度</strong>搜索引擎搜索关键词“前端开发”的页面
(广告明显减少) <img src="http://img.ifish.ink/img/uo7.png" /></p></li>
<li><p>测试爱奇艺视频 (请注意下面gif图中广告时间的变化) <img
src="http://img.ifish.ink/img/uo.gif" /></p></li>
</ul>
<hr />
<h3 id="四参考">四、参考：</h3>
<p><a href="https://zh.wikipedia.org/wiki/UBlock_Origin"
title="https://zh.wikipedia.org/wiki/UBlock_Origin">1</a>.
维基百科：https://zh.wikipedia.org/wiki/UBlock_Origin</p>
<hr />
<p><strong>如有任何疑问或建议欢迎下方留言 :-)</strong></p>
]]></content>
      <categories>
        <category>工具技能</category>
      </categories>
      <tags>
        <tag>神器</tag>
        <tag>插件</tag>
      </tags>
  </entry>
  <entry>
    <title>三对角矩阵求逆的算法-实现</title>
    <url>/post/891db679.html</url>
    <content><![CDATA[<blockquote>
<p>本文实现的是论文《三对角矩阵求逆的算法》
论文作者：冉瑞生、黄延祝等人</p>
</blockquote>
<span id="more"></span>
<h3 id="matlab代码">MATLAB代码</h3>
<ul>
<li>函数实现</li>
</ul>
<pre class="language-matlab" data-language="matlab"><code class="language-matlab"><span class="token keyword">function</span> <span class="token punctuation">[</span>A<span class="token punctuation">,</span>C<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">cqj_InverseMatrixOfTridiagonalMatrices</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span>
<span class="token comment">% 本文实现的是论文《三对角矩阵求逆的算法》论文作者：冉瑞生、黄延祝等人</span>
<span class="token comment">% 本文算法的计算复杂度为O(n^2)</span>
<span class="token comment">% 应用数学和力学，第30卷，第2期 2009年2月15日出版 文章编号：1000-0887(2009)02-0238-07</span>
<span class="token comment">% Code author:Qingjun Chang  qingjun_chang@163.com &amp; qingjun.cn@gmail.com</span>
<span class="token comment">% INPUT     a：下对角线 1*(n-1)</span>
<span class="token comment">%           b：对角线 1*n</span>
<span class="token comment">%           c：上对角线 1*(n-1)</span>
<span class="token comment">% OUTPUT    A：原始三对角矩阵</span>
<span class="token comment">%           C：逆矩阵</span>
C <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token comment">%% STEP1 input A</span>

A <span class="token operator">=</span> <span class="token function">diag</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">diag</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">diag</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> a<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">%% STEP2 将A分解成A = LU</span>
%
<span class="token comment">% $\alpha_1=b_1$</span>
<span class="token comment">% $\tau_&#123;i-1&#125;=\frac&#123;c_&#123;i-1&#125;&#125;&#123;\alpha_&#123;i-1&#125;&#125;,\alpha_i=b_i-a_i\tau_&#123;i-1&#125;,$</span>
<span class="token comment">% $\gamma_i=\frac&#123;a_i&#125;&#123;\alpha_&#123;i-1&#125;&#125;(i=2,\cdots,n)$</span>
%
n <span class="token operator">=</span> <span class="token function">size</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">alpha</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token function">alpha</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span>
    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token string">'算法2.1失败!正在尝试算法2.2...\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    syms x
    alpha <span class="token operator">=</span> x<span class="token punctuation">;</span>
    flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">end</span>
<span class="token keyword">for</span> <span class="token number">i</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">:</span>n
    <span class="token function">t</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token function">alpha</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">alpha</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">t</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">gamma</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token function">alpha</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token function">alpha</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span>
        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token string">'算法2.1失败!正在尝试算法2.2...\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        syms x
        alpha <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token function">alpha</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">i</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> x<span class="token punctuation">]</span><span class="token punctuation">;</span>
        t <span class="token operator">=</span> <span class="token punctuation">[</span>t x<span class="token punctuation">]</span><span class="token punctuation">;</span>
        gamma <span class="token operator">=</span> <span class="token punctuation">[</span>gamma x<span class="token punctuation">]</span><span class="token punctuation">;</span>
        flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">end</span>
<span class="token keyword">end</span>
<span class="token keyword">if</span> <span class="token function">alpha</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span>
    <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token string">'矩阵是奇异的!\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token keyword">end</span>
<span class="token comment">%% 算法2.2的一部分</span>
%
<span class="token comment">% $P(x)=\Pi_&#123;i=1&#125;^n\alpha_i$</span>
%
<span class="token keyword">if</span> flag
    P <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token number">i</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">:</span>n
        P <span class="token operator">=</span> P<span class="token operator">*</span><span class="token function">alpha</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">end</span>
    P <span class="token operator">=</span> <span class="token function">expand</span><span class="token punctuation">(</span>P<span class="token punctuation">)</span><span class="token punctuation">;</span>
    P_poly <span class="token operator">=</span> <span class="token function">sym2poly</span><span class="token punctuation">(</span>P<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">% 偶尔会出现错误 提示是Not a polynomial.以后修复</span>
    <span class="token keyword">if</span> <span class="token operator">~</span><span class="token function">P_poly</span><span class="token punctuation">(</span><span class="token keyword">end</span><span class="token punctuation">)</span>
        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token string">'矩阵是奇异的\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token keyword">end</span>
<span class="token keyword">end</span>

<span class="token comment">%% STEP3 计算逆矩阵的最后一个元</span>
%
<span class="token comment">% $C_&#123;nn&#125;=\frac&#123;1&#125;&#123;\alpha_n&#125;$</span>
%
C <span class="token operator">=</span> <span class="token function">zeros</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> flag
    C <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token function">C</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">:</span><span class="token keyword">end</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> x<span class="token punctuation">]</span><span class="token punctuation">;</span>
    C <span class="token operator">=</span> <span class="token function">reshape</span><span class="token punctuation">(</span>C<span class="token punctuation">,</span>n<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">end</span>
<span class="token function">C</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>n<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">/</span><span class="token function">alpha</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">%% STEP4 计算逆矩阵C的主对角线元素</span>
%
<span class="token comment">% $C_&#123;ii&#125;=\frac&#123;1&#125;&#123;\alpha_i&#125;+\tau_i\gamma_&#123;i+1&#125;C_&#123;i+1,i+1&#125; (i = n-1,\cdots,2,1)$</span>
%
<span class="token keyword">for</span> <span class="token number">i</span> <span class="token operator">=</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">1</span>
    <span class="token function">C</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">i</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">/</span><span class="token function">alpha</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">t</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">gamma</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">C</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">i</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">end</span>

<span class="token comment">%% STEP5 计算第i行位于主对角线元素左边的元素以及位于第i列位于主对角线上方的元素</span>
%
<span class="token comment">% $C_&#123;ij&#125;=-\gamma_&#123;j+1&#125;C_&#123;i,j+1&#125; (i=n,n-1,\cdots,2;j=i-1,\cdots,1)$</span>
%
<span class="token comment">% $C_&#123;ji&#125;=-\tau_jC_&#123;j+1,i&#125; (i=n,n-1,\cdots,2;j=i-1,\cdots,1)$</span>
%
<span class="token keyword">for</span> <span class="token number">i</span> <span class="token operator">=</span> n<span class="token operator">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">2</span>
    <span class="token keyword">for</span> <span class="token number">j</span> <span class="token operator">=</span> <span class="token number">i</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">1</span>
        <span class="token function">C</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token function">gamma</span><span class="token punctuation">(</span><span class="token number">j</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">C</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">end</span>
<span class="token keyword">end</span>
<span class="token keyword">for</span> <span class="token number">i</span> <span class="token operator">=</span> n<span class="token operator">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">2</span>
    <span class="token keyword">for</span> <span class="token number">j</span> <span class="token operator">=</span> <span class="token number">i</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">1</span>
        <span class="token function">C</span><span class="token punctuation">(</span><span class="token number">j</span><span class="token punctuation">,</span><span class="token number">i</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token function">t</span><span class="token punctuation">(</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">C</span><span class="token punctuation">(</span><span class="token number">j</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">end</span>
<span class="token keyword">end</span>

<span class="token comment">%% STEP6 输出C</span>
<span class="token keyword">if</span> flag
    C <span class="token operator">=</span> <span class="token function">expand</span><span class="token punctuation">(</span>C<span class="token punctuation">)</span><span class="token punctuation">;</span>
    str <span class="token operator">=</span> <span class="token string">'@(x) ['</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token number">i</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">:</span>n
        <span class="token keyword">for</span> <span class="token number">j</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">:</span>n
            temp <span class="token operator">=</span> <span class="token function">factor</span><span class="token punctuation">(</span><span class="token function">C</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            str <span class="token operator">=</span> <span class="token punctuation">[</span>str <span class="token string">' '</span> <span class="token function">char</span><span class="token punctuation">(</span><span class="token function">prod</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">end</span>
        str <span class="token operator">=</span> <span class="token punctuation">[</span>str <span class="token string">';'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">end</span>
    str <span class="token operator">=</span> <span class="token punctuation">[</span>str <span class="token string">']'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    Cfun <span class="token operator">=</span> <span class="token function">str2func</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    C <span class="token operator">=</span> <span class="token function">Cfun</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token keyword">end</span></code></pre>
<ul>
<li>测试</li>
</ul>
<pre class="language-matlab" data-language="matlab"><code class="language-matlab">a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">3</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
c <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">[</span>A<span class="token punctuation">,</span>C<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">cqj_InverseMatrixOfTridiagonalMatrices</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span></code></pre>
<ul>
<li>论文原文</li>
</ul>
<p><a
href="/pdf/三对角矩阵求逆的算法_冉瑞生.pdf">三对角矩阵求逆的算法_冉瑞生.pdf</a></p>
<ul>
<li>文档</li>
</ul>
<p><a
href="https://img.ifish.ink/pdf/Implementation_of_Tridiag_Matrix_Inversion_Algorithm.pdf">文档原文</a></p>
<hr />
<p><strong>如有任何疑问或建议欢迎下方留言 :-)</strong></p>
]]></content>
      <categories>
        <category>代数</category>
      </categories>
      <tags>
        <tag>MATLAB代码</tag>
        <tag>算法实现</tag>
      </tags>
  </entry>
  <entry>
    <title>多维放缩MDS算法</title>
    <url>/post/94abe0b4.html</url>
    <content><![CDATA[<blockquote>
<p>在线性代数中我们接触到embedding(嵌入)这一术语，表示从高维到低维空间。考虑一个高维空间中的样本集在低维空间中的形态。
“embedding”也应用在计算机图形学的参数化领域中。</p>
</blockquote>
<h3 id="问题">问题</h3>
<p>给定高维空间<span
class="math inline">\(\mathbb{R}^n\)</span>中的<span
class="math inline">\(m\)</span>个样本点为<span
class="math inline">\(\{X_i\}_{i=1}^m\)</span>，考虑是否可以将<span
class="math inline">\(m\)</span>个样本嵌入到低维空间<span
class="math inline">\(\mathbb{R}^{d}\)</span>，<span
class="math inline">\(d&lt;
n\)</span>，使得高维空间中两样本点的度量距离在低维空间中保持不变。</p>
<figure>
<img
src="http://img.ifish.ink/2020/1110_1.png?imageMogr2/auto-orient/thumbnail/1000x1000"
alt="embedding" />
<figcaption aria-hidden="true">embedding</figcaption>
</figure>
<span id="more"></span>
<h3 id="分析">分析</h3>
<p>设高维空间中样本点<span class="math inline">\({
X}_i\)</span>在低维空间中表示为<span class="math inline">\({
Z}_i\)</span>，要保证度量距离不变，即： <span class="math display">\[
\Vert {X}_i-{ X}_j\Vert=\Vert { Z}_i-{ Z}_j\Vert\qquad i,j=1,2,\dots,m
\label{eq1}
\]</span> 将上式平方得到： <span class="math display">\[
\Vert {X}_i-{ X}_j\Vert^2=\Vert { Z}_i\Vert^2+\Vert { Z}_j\Vert^2-2{
Z}_i^{ T}{ Z}_j
\label{eq2}
\]</span> 令<span class="math inline">\({ B}={ Z}^{ T}{
Z}\in\mathbb{R}^{m\times
m}\)</span>表示低维空间中样本的内积矩阵，内积矩阵第<span
class="math inline">\(i\)</span>行第<span
class="math inline">\(j\)</span>列元素为<span
class="math inline">\(B_{i,j}=Z_i^{\rm T}Z_j\)</span>，用<span
class="math inline">\(D\)</span>表示样本在原始空间中的距离矩阵，其中<span
class="math inline">\(D_{i,j}=\Vert X_i-X_j\Vert\)</span>， <span
class="math display">\[
D_{i,j}^2=B_{i,i}+B_{j,j}-2B_{i,j}
\label{eq3}
\]</span> 如果得到满足上式约束的矩阵<span class="math inline">\({
B}\)</span>，假定<span class="math inline">\({ B}\)</span>含有<span
class="math inline">\(k\)</span>个非零特征值，分别为<span
class="math inline">\(\lambda_1,\lambda_2,\dots,\lambda_k\)</span>且满足<span
class="math inline">\(\lambda_i\ge\lambda_j,i&lt; j\)</span>，则有<span
class="math inline">\({ B}={ V\Lambda V^T}\)</span>，其中<span
class="math inline">\({
\Lambda}=diag\{\lambda_1,\lambda_2,\dots,\lambda_k\}\)</span>，<span
class="math inline">\({ V}\)</span>的第<span
class="math inline">\(i\)</span>列是特征值<span
class="math inline">\(\lambda_i\)</span>对应的特征向量。则有<span
class="math inline">\({ Z}={ \Lambda}^{\frac{1}{2}}{ V}^{
T}\in\mathbb{R}^{k\times m}\)</span>，如果<span
class="math inline">\(k&lt;
n\)</span>，则实现距离不变的降维。下面考虑如何求解满足上式约束的内积矩阵。</p>
<h3 id="内积矩阵的推导">内积矩阵的推导</h3>
<p>考虑低维样本的中心为原点，即<span
class="math inline">\(\sum_iZ_i=0\)</span>，根据第二等式有： <span
class="math display">\[
\sum_iD_{i,j}^2=\sum_iB_{i,i}+mB_{j,j}
\]</span></p>
<p><span class="math display">\[
\sum_{i,j}D_{i,j}^2 =2m\sum_iB_{i,i}
\]</span></p>
<p>有：<br />
<span class="math display">\[
B_{j,j}=\frac{\sum_iD_{i,j}^2}{m}-\frac{\sum_{i,j}D_{i,j}^2}{2m^2}
\]</span> 代入公式有： <span class="math display">\[
B_{i,j} =
-\frac{1}{2}(D_{i,j}^2-\frac{\sum_jD_{i,j}^2}{m}+\frac{\sum_{i,j}D_{i,j}^2}{m^2}-\frac{\sum_iD_{i,j}^2}{m})
\]</span> 由此则可得到内积矩阵。</p>
<h3 id="距离不必严格相等的嵌入">距离不必严格相等的嵌入</h3>
<p>特别地，在现实应用为了降低维度，多数情况下会损失一部分信息。即，如果目标空间维度<span
class="math inline">\(d\)</span>小于非零特征值的个数，则做不到距离严格相等。此时取<span
class="math inline">\({
\Lambda_*}=diag\{\lambda_1,\lambda_2,\dots,\lambda_d\}\)</span>，对应的特征向量矩阵为<span
class="math inline">\(V_*\)</span>。即<span
class="math inline">\(B\approx{
V_*\Lambda_*V^T_*}\)</span>。低维空间中的样本可表示为 <span
class="math display">\[
Z=\Lambda_*^{\frac{1}{2}}V^T_*\in\mathbb{R}^{d\times m}
\]</span></p>
<h3 id="简单应用mathbbr3longmapstomathbbr2">简单应用<span
class="math inline">\(\mathbb{R}^3\longmapsto\mathbb{R}^2\)</span></h3>
<figure>
<img src="http://img.ifish.ink/2020/1110_2.png" alt="embedding" />
<figcaption aria-hidden="true">embedding</figcaption>
</figure>
]]></content>
      <categories>
        <category>几何处理</category>
      </categories>
      <tags>
        <tag>曲面参数化</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenGL坐标与ImGui坐标在视网膜屏幕上的转换</title>
    <url>/post/e9330479.html</url>
    <content><![CDATA[<h1 id="opengl-坐标与-imgui-坐标在视网膜屏幕上的转换">OpenGL 坐标与
ImGui 坐标在视网膜屏幕上的转换</h1>
<h2 id="简介">简介</h2>
<p>在高分辨率显示器（尤其是视网膜屏幕）上开发图形应用时，通常需要处理不同的坐标系统和像素密度问题。<strong>OpenGL</strong>
和 <strong>ImGui</strong>
都有各自的坐标系统，当在视网膜屏幕上进行开发时，如何正确处理坐标转换成为一个关键问题。</p>
<p>本文将探讨如何在视网膜屏幕上进行 <strong>OpenGL 坐标</strong> 和
<strong>ImGui 坐标</strong>
之间的转换，并讨论像素密度对坐标计算的影响。</p>
<h2 id="opengl-坐标系统">1. OpenGL 坐标系统</h2>
<p>在 OpenGL 中，坐标系统通常是以 <strong>标准化设备坐标（Normalized
Device Coordinates, NDC）</strong> 表示的。它的范围为：</p>
<ul>
<li>X 轴范围：<code>[-1, 1]</code></li>
<li>Y 轴范围：<code>[-1, 1]</code></li>
</ul>
<p>这意味着屏幕的中心为 <code>(0, 0)</code>，左下角为
<code>(-1, -1)</code>，右上角为
<code>(1, 1)</code>。通常，这个坐标系统会通过投影矩阵映射到屏幕空间。</p>
<p>在高分辨率（视网膜）屏幕上，例如MacBook最近几年的屏幕，每个物理像素可能对应多个屏幕像素，这就是
<strong>像素密度（Pixel Density）</strong>
的概念。一般情况下，视网膜屏幕的像素密度为
<code>2x</code>，这意味着每个逻辑像素会显示在 2x2 的物理像素网格上。</p>
<h2 id="imgui-坐标系统">2. ImGui 坐标系统</h2>
<p><strong><a href="https://github.com/ocornut/imgui">ImGui</a></strong>
是一个常用于图形界面的库，其坐标系统通常基于窗口的分辨率，默认情况下，ImGui
的坐标是基于像素的。例如：</p>
<ul>
<li>X 轴范围：<code>[0, 窗口宽度]</code></li>
<li>Y 轴范围：<code>[0, 窗口高度]</code></li>
</ul>
<p>与 OpenGL 的 NDC 坐标不同，ImGui
的坐标系原点位于左上角，且单位为像素。因此，在处理 ImGui
坐标时，尤其是在高分辨率屏幕上，需要考虑像素密度。</p>
<h2 id="视网膜屏幕上的像素密度">3. 视网膜屏幕上的像素密度</h2>
<p>在视网膜屏幕上，通常会有一个 <strong>缩放因子</strong>，也叫
<strong>DPI 缩放</strong> 或 <strong>像素比（Pixel
Ratio）</strong>。例如，对于 2x 的视网膜屏幕，缩放因子为
<code>2.0</code>。这意味着窗口的逻辑分辨率和物理分辨率之间存在比例差异。</p>
<p>假设一个视网膜屏幕的物理分辨率为
<code>2880x1800</code>，而其逻辑分辨率为
<code>1440x900</code>，那么像素比为 <code>2.0</code>。</p>
<p>在这种情况下，OpenGL 和 ImGui
需要正确处理这个像素比，以确保坐标和尺寸能够正确映射到物理像素上。</p>
<h2 id="坐标转换方法">4. 坐标转换方法</h2>
<h3 id="opengl-坐标到-imgui-坐标">OpenGL 坐标到 ImGui 坐标</h3>
<p>假设你有 OpenGL 中的标准化设备坐标
<code>(x_ndc, y_ndc)</code>，想将其转换为 ImGui 的窗口坐标
<code>(x_imgui, y_imgui)</code>。可以按照以下步骤进行转换：</p>
<ol type="1">
<li>获取窗口的逻辑分辨率 <code>(width_logical, height_logical)</code>
和像素比 <code>pixel_ratio</code>。</li>
<li>使用如下公式进行转换：</li>
</ol>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp">x_imgui <span class="token operator">=</span> <span class="token punctuation">(</span>x_ndc <span class="token operator">+</span> <span class="token number">1.0f</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0.5f</span> <span class="token operator">*</span> width_logical <span class="token operator">*</span> pixel_ratio<span class="token punctuation">;</span>
y_imgui <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1.0f</span> <span class="token operator">-</span> y_ndc<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0.5f</span> <span class="token operator">*</span> height_logical <span class="token operator">*</span> pixel_ratio<span class="token punctuation">;</span>

这里的 x_ndc 和 y_ndc 分别在 <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span> 范围内，代表 OpenGL 的标准化设备坐标。通过这种转换，你可以得到对应的 ImGui 坐标。

### ImGui 坐标到 OpenGL 坐标

反过来，如果你想将 ImGui 坐标转换回 OpenGL 坐标，可以使用以下公式：

```cpp
x_ndc <span class="token operator">=</span> <span class="token punctuation">(</span>x_imgui <span class="token operator">/</span> <span class="token punctuation">(</span>width_logical <span class="token operator">*</span> pixel_ratio<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0f</span> <span class="token operator">-</span> <span class="token number">1.0f</span><span class="token punctuation">;</span>
y_ndc <span class="token operator">=</span> <span class="token number">1.0f</span> <span class="token operator">-</span> <span class="token punctuation">(</span>y_imgui <span class="token operator">/</span> <span class="token punctuation">(</span>height_logical <span class="token operator">*</span> pixel_ratio<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0f</span><span class="token punctuation">;</span></code></pre>
<p>这将把 ImGui 的像素坐标映射回 OpenGL 的标准化设备坐标。</p>
<h2 id="示例代码">5. 示例代码</h2>
<p>以下是一个简单的代码片段，演示了如何在视网膜屏幕上进行 OpenGL 和
ImGui 坐标的转换：</p>
<pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 假设 pixel_ratio = 2.0f (视网膜屏幕)</span>
<span class="token comment">// 假设窗口的逻辑分辨率为 1440x900</span>
<span class="token keyword">float</span> width_logical <span class="token operator">=</span> <span class="token number">1440.0f</span><span class="token punctuation">;</span>
<span class="token keyword">float</span> height_logical <span class="token operator">=</span> <span class="token number">900.0f</span><span class="token punctuation">;</span>
<span class="token keyword">float</span> pixel_ratio <span class="token operator">=</span> <span class="token number">2.0f</span><span class="token punctuation">;</span>

<span class="token comment">// OpenGL 标准化设备坐标</span>
<span class="token keyword">float</span> x_ndc <span class="token operator">=</span> <span class="token number">0.5f</span><span class="token punctuation">;</span>
<span class="token keyword">float</span> y_ndc <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">0.5f</span><span class="token punctuation">;</span>

<span class="token comment">// 转换为 ImGui 坐标</span>
<span class="token keyword">float</span> x_imgui <span class="token operator">=</span> <span class="token punctuation">(</span>x_ndc <span class="token operator">+</span> <span class="token number">1.0f</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0.5f</span> <span class="token operator">*</span> width_logical <span class="token operator">*</span> pixel_ratio<span class="token punctuation">;</span>
<span class="token keyword">float</span> y_imgui <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1.0f</span> <span class="token operator">-</span> y_ndc<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0.5f</span> <span class="token operator">*</span> height_logical <span class="token operator">*</span> pixel_ratio<span class="token punctuation">;</span>

std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"ImGui 坐标: ("</span> <span class="token operator">&lt;&lt;</span> x_imgui <span class="token operator">&lt;&lt;</span> <span class="token string">", "</span> <span class="token operator">&lt;&lt;</span> y_imgui <span class="token operator">&lt;&lt;</span> <span class="token string">")"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>

<span class="token comment">// 再将 ImGui 坐标转换回 OpenGL 坐标</span>
x_ndc <span class="token operator">=</span> <span class="token punctuation">(</span>x_imgui <span class="token operator">/</span> <span class="token punctuation">(</span>width_logical <span class="token operator">*</span> pixel_ratio<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0f</span> <span class="token operator">-</span> <span class="token number">1.0f</span><span class="token punctuation">;</span>
y_ndc <span class="token operator">=</span> <span class="token number">1.0f</span> <span class="token operator">-</span> <span class="token punctuation">(</span>y_imgui <span class="token operator">/</span> <span class="token punctuation">(</span>height_logical <span class="token operator">*</span> pixel_ratio<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0f</span><span class="token punctuation">;</span>

std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"OpenGL 坐标: ("</span> <span class="token operator">&lt;&lt;</span> x_ndc <span class="token operator">&lt;&lt;</span> <span class="token string">", "</span> <span class="token operator">&lt;&lt;</span> y_ndc <span class="token operator">&lt;&lt;</span> <span class="token string">")"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span></code></pre>
<h2 id="总结">6. 总结</h2>
<p>在高分辨率（如视网膜）屏幕上，处理OpenGL和ImGui坐标之间的转换需要考虑<strong>像素密度</strong>和<strong>坐标系统的不同</strong>。通过正确处理像素比和坐标转换，可以确保应用程序在高分辨率屏幕上正确显示。</p>
]]></content>
      <categories>
        <category>工具技能</category>
      </categories>
      <tags>
        <tag>OpenGL</tag>
        <tag>ImGui</tag>
        <tag>Retina</tag>
        <tag>坐标转换</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Hexo搭建Github静态页面与域名绑定</title>
    <url>/post/5755d91.html</url>
    <content><![CDATA[<h2 id="简介">1. 简介</h2>
<p>Hexo是一个基于Node.js的静态博客框架，能够快速生成静态网页。通过将
Hexo生成的静态网页部署到GitHub
Pages，用户可以轻松搭建一个免费的个人网站。本教程将详细介绍如何使用Hexo搭建静态页面并将其托管到GitHub
Pages上，同时绑定自定义域名。</p>
<h2 id="环境准备">2. 环境准备</h2>
<p>在开始搭建Hexo静态页面之前，你需要完成以下环境配置：</p>
<ol type="1">
<li><strong>Node.js</strong>：Hexo基于Node.js运行，因此需要安装Node.js和npm。可以通过以下方式安装：</li>
</ol>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装Node.js和npm</span>
brew <span class="token function">install</span> <span class="token function">node</span></code></pre>
<ol start="2" type="1">
<li><strong>Git</strong>：Hexo生成的静态页面需要通过Git提交到GitHub
Pages上，因此需要安装Git。可以通过以下方式安装：</li>
</ol>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装 Git</span>
brew <span class="token function">install</span> <span class="token function">git</span></code></pre>
<ol start="3" type="1">
<li><p><strong>GitHub账号</strong>：需要注册一个GitHub账号，用于托管Hexo生成的静态页面。</p></li>
<li><p><strong>Hexo</strong>：安装Hexo命令行工具，可以通过以下方式安装：</p></li>
</ol>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装Hexo</span>
<span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> hexo-cli</code></pre>
<h2 id="初始化hexo项目">3. 初始化Hexo项目</h2>
<p>在完成环境准备后，可以开始初始化Hexo项目。</p>
<ol type="1">
<li>首先，创建一个新的Hexo项目，并进入该文件夹：</li>
</ol>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> my-blog
<span class="token builtin class-name">cd</span> my-blog</code></pre>
<ol start="2" type="1">
<li>然后，初始化Hexo项目：</li>
</ol>
<pre class="language-bash" data-language="bash"><code class="language-bash">hexo init</code></pre>
<p>初始化完成后，Hexo 会在项目文件夹中生成一系列文件和文件夹，包括
<code>source/</code>和<code>_config.yml</code> 等。</p>
<ol start="3" type="1">
<li>安装Hexo依赖：</li>
</ol>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span></code></pre>
<ol start="4" type="1">
<li>启动Hexo本地服务器，查看Hexo默认生成的页面：</li>
</ol>
<pre class="language-bash" data-language="bash"><code class="language-bash">hexo server</code></pre>
<p>在浏览器中输入
<code>http://localhost:4000</code>，即可查看Hexo默认生成的页面。</p>
<h2 id="部署到github-pages">4. 部署到GitHub Pages</h2>
<h3 id="创建github仓库">4.1 创建GitHub仓库</h3>
<ol type="1">
<li>在GitHub上创建一个新的仓库，用于托管Hexo生成的静态页面。仓库名称必须是以下格式之一：</li>
</ol>
<ul>
<li><code>username.github.io</code>：用于个人网站，其中<code>username</code>是你的GitHub用户名。（用于个人主页）</li>
<li><code>project-name</code>：用于项目网站，其中<code>project-name</code>是项目名称。（用于项目页面）</li>
</ul>
<ol start="2" type="1">
<li>获取仓库的SSH地址，用于后续提交Hexo生成的静态页面。</li>
</ol>
<h3 id="配置hexo部署">4.2 配置Hexo部署</h3>
<ol type="1">
<li>安装Hexo部署插件：</li>
</ol>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git <span class="token parameter variable">--save</span></code></pre>
<ol start="2" type="1">
<li>修改Hexo配置文件<code>_config.yml</code>，配置部署信息：</li>
</ol>
<pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">deploy</span><span class="token punctuation">:</span>
  <span class="token key atrule">type</span><span class="token punctuation">:</span> git
  <span class="token key atrule">repo</span><span class="token punctuation">:</span> git@github.com<span class="token punctuation">:</span>username/username.github.io.git
  <span class="token key atrule">branch</span><span class="token punctuation">:</span> main</code></pre>
<p>将<code>username</code>替换为你的GitHub用户名。需注意： -
<code>repo</code>字段填写你的GitHub仓库SSH地址或者HTTPS地址。（推荐使用SSH地址）
- <code>branch</code>字段填写你的GitHub
Pages分支，如果你的仓库默认分支为<code>master</code>，则填写<code>master</code>；如果默认分支为<code>main</code>，则填写<code>main</code>。</p>
<ol start="3" type="1">
<li>部署Hexo生成的静态页面到GitHub Pages：</li>
</ol>
<pre class="language-bash" data-language="bash"><code class="language-bash">hexo clean  <span class="token comment"># 清除缓存</span>
hexo generate  <span class="token comment"># 生成静态页面</span>
hexo deploy  <span class="token comment"># 部署到 GitHub Pages</span></code></pre>
<p>（可以缩写为<code>hexo d -g</code>）</p>
<ol start="4" type="1">
<li>在浏览器中输入
<code>https://username.github.io</code>，即可查看Hexo生成的静态页面。</li>
</ol>
<h2 id="绑定自定义域名">5. 绑定自定义域名</h2>
<p>你可以为你的 GitHub
Pages绑定自定义域名，使网站更具个性化。以下是具体步骤。</p>
<h3 id="获取域名注册域名">5.1 获取域名(注册域名)</h3>
<p>首先，你需要拥有一个域名。你可以通过域名注册商购买域名，例如阿里云、腾讯云、Godaddy等。</p>
<h3 id="配置域名dns解析">5.2 配置域名DNS解析</h3>
<p>在域名注册商的控制台中，找到<strong>DNS设置</strong>（或者类似的设置），添加以下记录：</p>
<ul>
<li>类型：<code>CNAME</code>，主机记录：<code>www</code>，记录值：<code>username.github.io</code>（将<code>username</code>替换为你的GitHub用户名）。</li>
<li>类型：<code>CNAME</code>，主机记录：<code>@</code>，记录值：<code>username.github.io</code>。</li>
</ul>
<h3 id="配置hexo项目">5.3 配置Hexo项目</h3>
<p>在Hexo项目的source目录下创建一个名为CNAME的文件，并在文件中写入你绑定的自定义域名。例如：</p>
<pre class="language-none"><code class="language-none">www.yourdomain.com
yourdomain.com</code></pre>
<p>将文件保存后，重新部署Hexo生成的静态页面到GitHub Pages：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">hexo clean  <span class="token comment"># 清除缓存</span>
hexo g  <span class="token comment"># 生成静态页面</span>
hexo d  <span class="token comment"># 部署到 GitHub Pages</span></code></pre>
<h3 id="github-pages设置">5.4 GitHub Pages设置</h3>
<ul>
<li><p>在GitHub仓库的Settings中，找到<strong>Custom
domain</strong>，填写你的自定义域名，例如<code>www.yourdomain.com</code>，保存即可。</p></li>
<li><p>如果你的域名支持HTTPS，可以在Settings中启用<strong>Enforce
HTTPS</strong>，开启HTTPS访问。</p></li>
</ul>
<h3 id="验证域名绑定">5.5 验证域名绑定</h3>
<p>在浏览器中输入你的自定义域名，例如<code>www.yourdomain.com</code>，即可访问你的Hexo生成的静态页面。</p>
<h2 id="常见问题">6. 常见问题</h2>
<h3 id="部署时遇到permission-denied错误权限问题">6.1
部署时遇到<code>Permission denied</code>错误（权限问题）</h3>
<p>如果使用SSH方式部署时遇到权限问题，请确保：</p>
<ol type="1">
<li>你的SSH公钥已经添加到GitHub账号中。</li>
<li>使用ssh-add命令将私钥添加到ssh-agent中：</li>
</ol>
<pre class="language-bash" data-language="bash"><code class="language-bash">ssh-add ~/.ssh/id_rsa</code></pre>
<h3 id="自定义域名访问出现404错误">6.2 自定义域名访问出现404错误</h3>
<p>确保一下事项：</p>
<ol type="1">
<li>域名DNS解析已经生效，可以通过<code>dig</code>命令或者在线工具查询域名解析情况。</li>
<li>GitHub Pages设置的Custom domain填写正确。</li>
<li>确保CNAME文件中填写的域名与GitHub Pages设置的Custom
domain一致。</li>
<li>等待一段时间，有时候DNS解析需要一段时间生效。</li>
</ol>
<h2 id="总结">7. 总结</h2>
<p>通过Hexo和GitHub
Pages，搭建一个免费的静态博客非常简单且高效。希望本教程对你有所帮助，欢迎关注我的博客，获取更多技术教程和资源。</p>
]]></content>
      <categories>
        <category>工具技能</category>
        <category>网站搭建</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Github Pages</tag>
        <tag>静态页面</tag>
        <tag>域名绑定</tag>
      </tags>
  </entry>
</search>
